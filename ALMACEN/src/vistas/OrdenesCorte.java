/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import controller.ArticuloController;
import controller.ClienteController;
import controller.ContactoClienteController;
import controller.DetalleOrdenCorteController;
import controller.OrdenCorteController;
import controller.PedidoController;
import controller.ProformaController;
import entity.Articulo;
import entity.Cliente;
import entity.ContactoCliente;
import entity.DetalleOrdenCorte;
import entity.OrdenCorte;
import entity.Pedido;
import entity.Proforma;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.jms.TextMessage;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.log4j.BasicConfigurator;
import static vistas.DetalleOrdenesCorte.txtCodArticulo;
import static vistas.Proformas.txtCodProf;

/**
 *
 * @author ARCRODINPC-06
 */
public class OrdenesCorte extends javax.swing.JInternalFrame {
    
    
    private static String url = "tcp://192.168.1.3:61616";
    private static String subject = "Facturador";
    
    
    
    
    
    int idCli;
    int idConCli;
    int idPed;
    int idProf;
    static int idOrdCort;
    static String numOrden;
    String nombre;
    String apellido;
    String contacto;
    int ultimoId;
    int generarId;
    String numOrd;
    
    String numeroOrden;// Para los botones anterior y siguiente
    boolean mensaje=false;
    
    int numPedido;
    String fechaPedido;
    
    String categoria;//motivo
    
    int tabla;
    String tablaCodArt;
    int idArticulo;
    
    String estado;
    String estadoCombo;
    
    String numCotizacion;
    /**
     * Creates new form OrdenesCorte
     */
    public OrdenesCorte() {
        initComponents();
        txtFecha.setText(fechaActual());
        txtAnioPedido.setText(anioActual());
        txtAnioOrden.setText(anioActual());
        habilitarInicio();
        enviarFacturador.setVisible(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtNumPedido = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        buttonCerrar = new javax.swing.JButton();
        buttonBuscarPedido = new javax.swing.JButton();
        txtNumOrden = new javax.swing.JTextField();
        buttonBuscarOrden = new javax.swing.JButton();
        buttonLimpiarTodo = new javax.swing.JButton();
        buttonNuevo = new javax.swing.JButton();
        buttonRegistrar = new javax.swing.JButton();
        buttonModificar = new javax.swing.JButton();
        buttonGuardar = new javax.swing.JButton();
        buttonEliminar = new javax.swing.JButton();
        buttonOrden = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtFecha = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtRuc = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtCliente = new javax.swing.JTextField();
        txtDireccion = new javax.swing.JTextField();
        txtContacto = new javax.swing.JTextField();
        comboBoxMotivo = new javax.swing.JComboBox<>();
        buttonVisual = new javax.swing.JButton();
        buttonSiguiente = new javax.swing.JButton();
        buttonAnterior = new javax.swing.JButton();
        txtAnioOrden = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtAnioPedido = new javax.swing.JTextField();
        buttonPedido = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        comboBoxEstado = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        txtObser = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtNumCot = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        enviarFacturador = new javax.swing.JButton();

        setClosable(true);
        setTitle("Registro Orden de Corte");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo Articulo", "Codigo Ubicacion", "Cantidad", "Diametro", "Longitud", "procedencia", "idDetalleOrdenCorte"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(95);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(115);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(95);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(192);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(127);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(150);
        }

        buttonCerrar.setText("Cerrar");
        buttonCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCerrarActionPerformed(evt);
            }
        });

        buttonBuscarPedido.setText("Buscar");
        buttonBuscarPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBuscarPedidoActionPerformed(evt);
            }
        });

        txtNumOrden.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        buttonBuscarOrden.setText("Buscar");
        buttonBuscarOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBuscarOrdenActionPerformed(evt);
            }
        });

        buttonLimpiarTodo.setText("Limpiar");
        buttonLimpiarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLimpiarTodoActionPerformed(evt);
            }
        });

        buttonNuevo.setText("Nuevo");
        buttonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNuevoActionPerformed(evt);
            }
        });

        buttonRegistrar.setText("Registrar");
        buttonRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRegistrarActionPerformed(evt);
            }
        });

        buttonModificar.setText("Modificar");
        buttonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonModificarActionPerformed(evt);
            }
        });

        buttonGuardar.setText("Guardar");
        buttonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGuardarActionPerformed(evt);
            }
        });

        buttonEliminar.setText("Eliminar");
        buttonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEliminarActionPerformed(evt);
            }
        });

        buttonOrden.setText("Detalle de Orden");
        buttonOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOrdenActionPerformed(evt);
            }
        });

        jLabel3.setText("Fecha: ");

        jLabel4.setText("R.U.C.:");

        jLabel5.setText("Cliente:");

        comboBoxMotivo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECCIONE", "VENTA LIMA", "VENTA PROVINCIA", "PLANTA DE PRODUCCION" }));
        comboBoxMotivo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxMotivoItemStateChanged(evt);
            }
        });

        buttonVisual.setText("Ver Orden Corte");
        buttonVisual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonVisualActionPerformed(evt);
            }
        });

        buttonSiguiente.setText("Siguiente>>");
        buttonSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSiguienteActionPerformed(evt);
            }
        });

        buttonAnterior.setText("<<Anterior");
        buttonAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAnteriorActionPerformed(evt);
            }
        });

        jLabel9.setText("Año:");

        jLabel10.setText("Año:");

        buttonPedido.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        buttonPedido.setText("Num. Pedido:");
        buttonPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPedidoActionPerformed(evt);
            }
        });

        jLabel1.setText("Estado:");

        comboBoxEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECCIONAR", "ENVIADO", "PENDIENTE", "ANULADO" }));
        comboBoxEstado.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxEstadoItemStateChanged(evt);
            }
        });

        jLabel11.setText("Observación:");

        jLabel12.setText("Hace referencia a la cotización:");

        jLabel13.setText("Número de Orden:");

        jLabel2.setText("Dirección:");

        jLabel14.setText("Contacto:");

        jLabel15.setText("Motivo:");

        enviarFacturador.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        enviarFacturador.setText("Enviar a Facturar");
        enviarFacturador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarFacturadorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAnioPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonPedido)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNumPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonBuscarPedido)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAnioOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNumOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonBuscarOrden)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonLimpiarTodo)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtObser, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboBoxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 464, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(282, 282, 282))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel5)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel4)
                                                .addComponent(jLabel2)
                                                .addComponent(jLabel14)
                                                .addComponent(jLabel15))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(comboBoxMotivo, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(txtDireccion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                                                    .addComponent(txtContacto, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtRuc, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(50, 50, 50)
                                            .addComponent(buttonNuevo)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(buttonRegistrar)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(buttonModificar)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(buttonGuardar)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(buttonEliminar)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 119, Short.MAX_VALUE)
                                            .addComponent(buttonOrden)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(buttonVisual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(enviarFacturador, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 782, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(352, 352, 352)
                                    .addComponent(buttonAnterior)
                                    .addGap(29, 29, 29)
                                    .addComponent(buttonSiguiente)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonCerrar)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNumCot, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNumPedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonBuscarPedido)
                            .addComponent(txtNumOrden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonBuscarOrden)
                            .addComponent(txtAnioOrden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(txtAnioPedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonPedido)
                            .addComponent(buttonLimpiarTodo)
                            .addComponent(jLabel13))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(txtNumCot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(comboBoxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(txtObser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtRuc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtContacto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxMotivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(enviarFacturador))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonNuevo)
                    .addComponent(buttonRegistrar)
                    .addComponent(buttonModificar)
                    .addComponent(buttonGuardar)
                    .addComponent(buttonEliminar)
                    .addComponent(buttonOrden)
                    .addComponent(buttonVisual))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCerrar)
                    .addComponent(buttonSiguiente)
                    .addComponent(buttonAnterior))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCerrarActionPerformed
        dispose();
    }//GEN-LAST:event_buttonCerrarActionPerformed

    private void buttonOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOrdenActionPerformed
        DetalleOrdenesCorte detOrdCort=null;
        try {
            detOrdCort = new DetalleOrdenesCorte();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrdenesCorte.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(OrdenesCorte.class.getName()).log(Level.SEVERE, null, ex);
        }
        Principal.jDesktopPane1.add(detOrdCort);
        detOrdCort.toFront();
        detOrdCort.setVisible(true);
        enviarFacturador.setVisible(true);
    }//GEN-LAST:event_buttonOrdenActionPerformed

    private void buttonBuscarPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBuscarPedidoActionPerformed
        try {
            consultarPedido(Integer.parseInt(txtNumPedido.getText()), Integer.parseInt(txtAnioPedido.getText()));
        } catch (Exception ex) {
            Logger.getLogger(OrdenesCorte.class.getName()).log(Level.SEVERE, null, ex);
        }
        habilitarBuscarPedido();
    }//GEN-LAST:event_buttonBuscarPedidoActionPerformed

    private void comboBoxMotivoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxMotivoItemStateChanged
        categoria = comboBoxMotivo.getSelectedItem().toString();
        if("SELECCIONE".equals(categoria)){
            categoria="";
        }
    }//GEN-LAST:event_comboBoxMotivoItemStateChanged

    private void buttonRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRegistrarActionPerformed
        try {
            GenerarCodigo();
        } catch (Exception ex) {
            Logger.getLogger(OrdenesCorte.class.getName()).log(Level.SEVERE, null, ex);
        }
        procesar(1);
        try {
            consultarOrdenCorte(txtNumOrden.getText(), Integer.parseInt(txtAnioOrden.getText()));
        } catch (Exception ex) {
            Logger.getLogger(OrdenesCorte.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        habilitarRegistrar();
    }//GEN-LAST:event_buttonRegistrarActionPerformed

    private void buttonBuscarOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBuscarOrdenActionPerformed
        String numeroOrdenB= String.format("%06d", (Integer.parseInt(txtNumOrden.getText())));
        System.out.println("numero de Orden: "+numeroOrdenB);
        try {
            consultarOrdenCorte(numeroOrdenB, Integer.parseInt(txtAnioOrden.getText()));
            listaDetalleOrdenCortePedido();
        } catch (Exception ex) {
            Logger.getLogger(OrdenesCorte.class.getName()).log(Level.SEVERE, null, ex);
        }
        habilitarBuscar();
    }//GEN-LAST:event_buttonBuscarOrdenActionPerformed

    private void buttonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGuardarActionPerformed
        procesar(2);
        habilitarGuardar();
    }//GEN-LAST:event_buttonGuardarActionPerformed

    private void buttonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEliminarActionPerformed

        if (jTable1.getRowCount() == 0 && jTable1.getSelectedRow() == -1) {
            procesar(3);
            limpiarTodo();
            habilitarEliminar();

        } else {
            JOptionPane.showMessageDialog(null, "Elimine los elementos de la tabla de Detalle de Orden de Corte");
        }
    }//GEN-LAST:event_buttonEliminarActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
            tabla = jTable1.getSelectedRow();
            tablaCodArt= jTable1.getValueAt(tabla, 6).toString(); //=jTable1.getValueAt(tabla, 0).toString();
            int a= Integer.parseInt(tablaCodArt);//id del detalle de orden de corte 
            DetalleOrdenesCorte detOrdenCort=null;
        try {
            detOrdenCort = new DetalleOrdenesCorte();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrdenesCorte.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(OrdenesCorte.class.getName()).log(Level.SEVERE, null, ex);
        }
            Principal.jDesktopPane1.add(detOrdenCort);
            detOrdenCort.toFront();
            detOrdenCort.setVisible(true);

         DetalleOrdenesCorte.habilitarTabla();

        try {
            DetalleOrdenesCorte.consultar(a);
        } catch (Exception ex) {
            Logger.getLogger(OrdenesCorte.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_jTable1MouseClicked

    private void buttonLimpiarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLimpiarTodoActionPerformed
        limpiarTodo();
        idOrdCort=0;
        listaDetalleOrdenCortePedido();
        habilitarInicio();
    }//GEN-LAST:event_buttonLimpiarTodoActionPerformed

    private void buttonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNuevoActionPerformed
        habilitarNuevo();
    }//GEN-LAST:event_buttonNuevoActionPerformed

    private void buttonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonModificarActionPerformed
        habilitarModificar();
    }//GEN-LAST:event_buttonModificarActionPerformed

    private void buttonVisualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonVisualActionPerformed
        OrdenCorteInfo ordCort = new OrdenCorteInfo();
        Principal.jDesktopPane1.add(ordCort);
        ordCort.toFront();
        ordCort.setVisible(true);
        
        try {
            consultarOrdenCorteInfo();
        } catch (Exception ex) {
            Logger.getLogger(OrdenesCorteVista.class.getName()).log(Level.SEVERE, null, ex);
        }
        OrdenCorteInfo.listaDetalleOrdenCortePedido(idOrdCort);
     
    }//GEN-LAST:event_buttonVisualActionPerformed

    private void buttonSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSiguienteActionPerformed
         numeroOrden = String.format("%06d", (Integer.parseInt(txtNumOrden.getText()) + 1));
        System.out.println(numeroOrden);
        int anioA=Integer.parseInt(txtAnioOrden.getText());
       
        limpiarTodo();
    
    try {
            consultarOrdenCorte(numeroOrden, anioA);
            listaDetalleOrdenCortePedido();
        } catch (Exception ex) {
            Logger.getLogger(OrdenesCorte.class.getName()).log(Level.SEVERE, null, ex);
        }
        habilitarBuscar();
      
        
       if (mensaje == true) {
       numeroOrden = String.format("%06d", (Integer.parseInt(numeroOrden)-1));
       anioA=Integer.parseInt(txtAnioOrden.getText());   
        try {
             consultarOrdenCorte(numeroOrden, anioA);
            listaDetalleOrdenCortePedido();
        } catch (Exception ex) {
            Logger.getLogger(OrdenesCorte.class.getName()).log(Level.SEVERE, null, ex);
        }
        habilitarBuscar();
       }
       mensaje=false;
    }//GEN-LAST:event_buttonSiguienteActionPerformed

    private void buttonAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAnteriorActionPerformed
        numeroOrden = String.format("%06d", (Integer.parseInt(txtNumOrden.getText()) - 1));
        System.out.println(numeroOrden);
        int anioA=Integer.parseInt(txtAnioOrden.getText());
        limpiarTodo();

        try {
            consultarOrdenCorte(numeroOrden, anioA);
            listaDetalleOrdenCortePedido();
        } catch (Exception ex) {
            Logger.getLogger(OrdenesCorte.class.getName()).log(Level.SEVERE, null, ex);
        }
        habilitarBuscar();
        System.out.println("ultimo numero: " + numeroOrden);
        System.out.println(mensaje);
        
        if (mensaje == true) {
            numeroOrden = String.format("%06d", (Integer.parseInt(numeroOrden) + 1));
            anioA=Integer.parseInt(txtAnioOrden.getText());
            try {
                consultarOrdenCorte(numeroOrden, anioA);
                listaDetalleOrdenCortePedido();
            } catch (Exception ex) {
                Logger.getLogger(OrdenesCorte.class.getName()).log(Level.SEVERE, null, ex);
            }
            habilitarBuscar();
        }
        mensaje = false;
    }//GEN-LAST:event_buttonAnteriorActionPerformed

    private void buttonPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPedidoActionPerformed
        PedidosOrdenCorte ped = new PedidosOrdenCorte();
        Principal.jDesktopPane1.add(ped);
        ped.toFront();
        ped.setVisible(true);
    }//GEN-LAST:event_buttonPedidoActionPerformed

    private void comboBoxEstadoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxEstadoItemStateChanged
        if (comboBoxEstado.getSelectedIndex() != 0) {
            estadoCombo = comboBoxEstado.getSelectedItem().toString();
        } else{
            
        }
    }//GEN-LAST:event_comboBoxEstadoItemStateChanged

    private void enviarFacturadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarFacturadorActionPerformed
        
            try {
            // TODO add your handling code here:
            BasicConfigurator.configure();
            ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(url);
            javax.jms.Connection connection = connectionFactory.createConnection();
            connection.start();
            Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

            Destination destination = session.createQueue(subject);
            MessageProducer producer = session.createProducer(destination);
            
            TextMessage message = session.createTextMessage(txtNumPedido.getText());
            producer.send(message);
            JOptionPane.showMessageDialog(null, "pedido atendido, se envio a Facturacion");
            connection.close();

        } catch (JMSException ex) {
            Logger.getLogger(Proformas.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        
    }//GEN-LAST:event_enviarFacturadorActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAnterior;
    private javax.swing.JButton buttonBuscarOrden;
    private javax.swing.JButton buttonBuscarPedido;
    private javax.swing.JButton buttonCerrar;
    private javax.swing.JButton buttonEliminar;
    private javax.swing.JButton buttonGuardar;
    private javax.swing.JButton buttonLimpiarTodo;
    private javax.swing.JButton buttonModificar;
    private javax.swing.JButton buttonNuevo;
    private javax.swing.JButton buttonOrden;
    private javax.swing.JButton buttonPedido;
    private javax.swing.JButton buttonRegistrar;
    private javax.swing.JButton buttonSiguiente;
    private javax.swing.JButton buttonVisual;
    private javax.swing.JComboBox<String> comboBoxEstado;
    private javax.swing.JComboBox<String> comboBoxMotivo;
    private javax.swing.JButton enviarFacturador;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTable jTable1;
    private javax.swing.JTextField txtAnioOrden;
    private javax.swing.JTextField txtAnioPedido;
    private javax.swing.JTextField txtCliente;
    private javax.swing.JTextField txtContacto;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtNumCot;
    private static javax.swing.JTextField txtNumOrden;
    public static javax.swing.JTextField txtNumPedido;
    private javax.swing.JTextField txtObser;
    private javax.swing.JTextField txtRuc;
    // End of variables declaration//GEN-END:variables

    ClienteController obj = new ClienteController();
    Cliente pro;

    ContactoClienteController obj1 = new ContactoClienteController();
    ContactoCliente pro1;
    
    ProformaController obj5=new ProformaController();
    Proforma pro5;

    OrdenCorteController obj3 = new OrdenCorteController();
    OrdenCorte pro3;
    
    PedidoController pedidocontroler =new PedidoController();
    Pedido pedido;
    
  static  DetalleOrdenCorteController obj4 = new DetalleOrdenCorteController();
  static  DetalleOrdenCorte pro4;
  
  ArticuloController obj6= new ArticuloController();
  Articulo pro6;
  
  ProformaController proformacontroler= new ProformaController();
  Proforma proforma;
  
// -------------------------- Procesar ------------------------------------------------------

    private void procesar(int op) {
        pro3 = leerDatos();
        try {
            System.out.println("11111111111");
            String msg = obj3.OrdenCorteProcesar(pro3, op);
            JOptionPane.showMessageDialog(null, msg);
        } catch (Exception e) {
            //JOptionPane.showMessageDialog(null, e.getMessage());
            System.out.println("Error" + e.getMessage());
        }
    }
    
    
//-------------------------- Consultar --------------------------
    
    private void consultarCliente(int idCli) throws Exception {
        pro = obj.ClienteBuscar1(idCli);
        if (pro != null) {

            txtCliente.setText(pro.getRazonSocial());
            txtRuc.setText(pro.getRuc());
            txtDireccion.setText(pro.getDireccion());

        } else {
            JOptionPane.showMessageDialog(null, "Cliente no registrado");
            //System.out.println("Error");
        }
    }

    private void consultarContactoCliente(int idConCli) throws Exception {

        pro1 = obj1.ContactoClienteBuscar2(idConCli);
        if (pro1 != null) {

            nombre = pro1.getNombres();
            apellido = pro1.getApellidos();
            contacto = nombre + " " + apellido;
            txtContacto.setText(contacto);

        } else {
            //JOptionPane.showMessageDialog(null, "Contacto no registrado");
            //System.out.println("Error");
        }
    }
    
    private void consultarCodigoProforma(int idP) throws Exception {

        proforma = proformacontroler.ProformaBuscar1(idP);
        if (proforma != null) {

            numCotizacion = proforma.getCodProforma();
            txtNumCot.setText(numCotizacion);
            //codProformaParaDetalle= proforma.getCodProforma();

        } else {
            //JOptionPane.showMessageDialog(null, "Contacto no registrado");
            //System.out.println("Error");
        }
    }

    private void consultarPedido(int numPed, int anio) throws Exception {
        pedido = pedidocontroler.PedidoBuscar(numPed, anio);
        if (pedido != null) {

            idPed = pedido.getIdPedido();
            idProf=pedido.getIdProforma();
            consultarCodigoProforma(idProf);
            fechaPedido=pedido.getFechaEmision();
            idCli = pedido.getIdCliente();
            consultarCliente(idCli);

            idConCli = pedido.getIdContactoCliente();
            consultarContactoCliente(idConCli);

        } else {
            JOptionPane.showMessageDialog(null, "Pedido no registrado");
            //System.out.println("Error");
        }
    }
    
    private void consultarPedidoYNumCotizacionParaOrdenCorte(int ped) throws Exception {
        pedido = pedidocontroler.PedidoBuscarNumPedAll(ped);
        if (pedido != null) {

            idPed = pedido.getIdPedido();
            idProf=pedido.getIdProforma();
            consultarCodigoProforma(idProf);
            
        } else {
            JOptionPane.showMessageDialog(null, "Pedido no registrado");
            //System.out.println("Error");
        }
    }
       
    
 private void consultarNumPedido(int idped) throws Exception {

        pedido = pedidocontroler.PedidoBuscarNumPedAll(idped);
        if (pedido!= null) {
            
            idPed=pedido.getIdPedido();
            numPedido=pedido.getNumPedido();
            txtNumPedido.setText(Integer.toString(pedido.getNumPedido()));
            idCli = pedido.getIdCliente();
            consultarCliente(idCli);
            idConCli = pedido.getIdContactoCliente();
            consultarContactoCliente(idConCli);
               
         
        } else {
            //JOptionPane.showMessageDialog(null, "Contacto no registrado");
            //System.out.println("Error");
            mensaje=true;
        }
    }
    
    private void consultarOrdenCorte(String orden, int anio) throws Exception {
        pro3 = obj3.OrdenCorteBuscar(orden, anio);
        
        if (pro3 != null) {
            numOrden = pro3.getNumOrdCort();
            txtNumOrden.setText(pro3.getNumOrdCort());
            idOrdCort = pro3.getIdOrdenCorte();
            idPed = pro3.getIdPedido();
            consultarNumPedido(idPed);
            consultarPedidoYNumCotizacionParaOrdenCorte(idPed);
            txtFecha.setText(pro3.getFecha());

            categoria = pro3.getMotivo();
            System.out.println("motivo" + categoria);
            String testValue = categoria;
            for (int i = 0; i < comboBoxMotivo.getModel().getSize(); i++) {
                if (comboBoxMotivo.getItemAt(i).toString().equals(testValue)) {
                    System.out.println(i);
                    comboBoxMotivo.setSelectedIndex(i);
                    break;
                }
            }  
            
            estado=pro3.getEstado();
            String testValue1 = estado;
            for (int i = 0; i < comboBoxEstado.getModel().getSize(); i++) {
                if (comboBoxEstado.getItemAt(i).toString().equals(testValue1)) {
                    System.out.println(i);
                    comboBoxEstado.setSelectedIndex(i);
                    break;
                }
            }  
            
            txtObser.setText(pro3.getObservacion());
            
        } else {
            JOptionPane.showMessageDialog(null, "Orden Corte no registrada");
            mensaje=true;
            
            //System.out.println("Error");
        }
    }
    
    void consultarIdArt(String cod) throws Exception{
        pro6 = obj6.ArticuloBuscar(cod);
        if (pro6 != null) {

            idArticulo = pro6.getAidArticulo();
         
        } else {
            JOptionPane.showMessageDialog(null, "Articulo no registrado");
            //System.out.println("Error");
        }
    
    
    }
    
     private void consultarNumOrden(int id) throws Exception {

        pro3= obj3.OrdenCorteBuscarNum(id);
        if (pro3!= null) {
                   
            numOrd=pro3.getNumOrdCort();
            generarId=Integer.parseInt(numOrd); 
            System.out.println("generar Id del numOrden");
        } else {
            numOrden=Integer.toString(0);
            generarId=0;
            System.out.println("generar id del else:"+generarId);
            //JOptionPane.showMessageDialog(null, "Contacto no registrado");
            //System.out.println("Error");
        }
    }
    
    private void consultarUltimoId(int anioa) throws Exception {
        pro3 = obj3.OrdenCorteBuscarUltimoId(anioa);
        if (pro3 != null) {
            ultimoId = pro3.getIdOrdenCorte();
            System.out.println("generar id ultimo id: "+ultimoId);
        }else{
            ultimoId=0;
            numOrden=null;
            System.out.println("generar id ultimo id: "+ultimoId);
        }
        
    }
    private void GenerarCodigo() throws Exception {
        consultarUltimoId(Integer.parseInt(txtAnioOrden.getText()));
        consultarNumOrden(ultimoId);
        generarId = generarId + 1; 
        txtNumOrden.setText(String.format("%06d", generarId));
        System.out.println("numero generado generado:"+ String.format("%06d", generarId));
    }
    
  // --------------------------- Leer Datos ---------------------------------------------
    private OrdenCorte leerDatos() {
        OrdenCorte ordCort = new OrdenCorte();
        
        ordCort.setIdOrdenCorte(idOrdCort);
        ordCort.setIdPedido(idPed);
        ordCort.setNumOrdCort(txtNumOrden.getText());
        ordCort.setFecha(txtFecha.getText());
        ordCort.setMotivo(categoria);
        ordCort.setEstado(estadoCombo);
        ordCort.setObservacion(txtObser.getText());

        return ordCort;
    }
    
//--------------------- Fecha --> Indica la fecha del dia  -----------------------------
    public String fechaActual() {
        Date fecha = new Date();

        SimpleDateFormat formatofecha = new SimpleDateFormat("YYYY/MM/dd");
        return formatofecha.format(fecha);
    }

    public String anioActual() {
        Date fecha = new Date();

        SimpleDateFormat formatofecha = new SimpleDateFormat("yyyy");
        return formatofecha.format(fecha);
    }
    //----------------------------- Tabla -----------------------------------------
    static void listaDetalleOrdenCortePedido() {
        List<DetalleOrdenCorte> lista;
        try {
            lista = obj4.DetalleOrdenCorteFiltrar(idOrdCort);
            verDetalleOrdenCorte(lista);

        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, e.getMessage());
            System.out.println("ERROR: " + e.getMessage());
        }
    }

    static private void verDetalleOrdenCorte(List<DetalleOrdenCorte> lista) {

        DefaultTableModel tabla=(DefaultTableModel)jTable1.getModel();
        tabla.setRowCount(0);
        for (DetalleOrdenCorte detOrd : lista) {
            Object[] fila = {detOrd.getCodArt(),detOrd.getCodUbi(),detOrd.getCantidad(), detOrd.getDiametro(), detOrd.getLongitud(), detOrd.getProcedencia(), detOrd.getIdDetalleOrdenCorte()};
            tabla.addRow(fila);
    
    }
}
//----------------------------------- Limpiar -------------------------------------------------------
    void limpiarTodo() {
        comboBoxMotivo.setSelectedIndex(0);
        txtCliente.setText("");
        txtContacto.setText("");
        txtDireccion.setText("");
        txtFecha.setText(fechaActual());
        txtNumOrden.setText("");
        txtNumPedido.setText("");
        txtNumCot.setText("");
        txtRuc.setText("");
        txtAnioOrden.setText(anioActual());
        txtAnioPedido.setText(anioActual());
        comboBoxEstado.setSelectedIndex(0);
        txtObser.setText("");
    }
    
     void limpiarProforma() {
        comboBoxMotivo.setSelectedIndex(0);
        txtCliente.setText("");
        txtContacto.setText("");
        txtDireccion.setText("");
        txtFecha.setText(fechaActual());
        txtNumOrden.setText("");
        txtNumPedido.setText("");
        txtNumCot.setText("");
        txtRuc.setText("");
        txtAnioPedido.setText(anioActual());
    }
    
  //-------------------------- Habilitar --------------------------------------------------
    
    void habilitarInicio() {

        buttonBuscarPedido.setEnabled(false);
        buttonPedido.setEnabled(false);
        buttonBuscarOrden.setEnabled(true);
        buttonLimpiarTodo.setEnabled(true);
        buttonNuevo.setEnabled(true);
        buttonRegistrar.setEnabled(false);
        buttonModificar.setEnabled(false);
        buttonGuardar.setEnabled(false);
        buttonEliminar.setEnabled(false);
        buttonOrden.setEnabled(false);
        buttonVisual.setEnabled(false);
        buttonSiguiente.setEnabled(false);
        buttonAnterior.setEnabled(false);

        txtNumPedido.setEnabled(false);
        txtNumCot.setEnabled(false);
        txtNumOrden.setEnabled(true);
        txtFecha.setEnabled(false);
        txtCliente.setEnabled(false);
        txtRuc.setEnabled(false);
        txtDireccion.setEnabled(false);
        txtContacto.setEnabled(false);
        comboBoxMotivo.setEnabled(false);
        comboBoxEstado.setEnabled(false);
        txtObser.setEnabled(false);
    }
    
        void habilitarBuscar() {

        buttonBuscarPedido.setEnabled(false);
        buttonPedido.setEnabled(false);
        buttonBuscarOrden.setEnabled(false);
        buttonLimpiarTodo.setEnabled(true);
        buttonNuevo.setEnabled(false);
        buttonRegistrar.setEnabled(false);
        buttonModificar.setEnabled(true);
        buttonGuardar.setEnabled(false);
        buttonEliminar.setEnabled(true);
        buttonOrden.setEnabled(true);
        buttonVisual.setEnabled(true);
        buttonSiguiente.setEnabled(true);
        buttonAnterior.setEnabled(true);

        txtNumPedido.setEnabled(false);
        txtNumCot.setEnabled(false);
        txtNumOrden.setEnabled(false);
        txtFecha.setEnabled(false);
        txtCliente.setEnabled(false);
        txtRuc.setEnabled(false);
        txtDireccion.setEnabled(false);
        txtContacto.setEnabled(false);
        comboBoxMotivo.setEnabled(false);
        comboBoxEstado.setEnabled(false);
        txtObser.setEnabled(false);
    }
        
    void habilitarBuscarProforma() {

        buttonBuscarPedido.setEnabled(false);
        buttonPedido.setEnabled(false);
        buttonBuscarOrden.setEnabled(false);
        buttonLimpiarTodo.setEnabled(true);
        buttonNuevo.setEnabled(false);
        buttonRegistrar.setEnabled(true);
        buttonModificar.setEnabled(false);
        buttonGuardar.setEnabled(false);
        buttonEliminar.setEnabled(false);
        buttonOrden.setEnabled(false);
        buttonVisual.setEnabled(false);
        buttonSiguiente.setEnabled(false);
        buttonAnterior.setEnabled(false);
        
        txtNumPedido.setEnabled(true);
        txtNumCot.setEnabled(true);
        txtNumOrden.setEnabled(true);
        txtFecha.setEnabled(true);
        txtCliente.setEnabled(true);
        txtRuc.setEnabled(true);
        txtDireccion.setEnabled(true);
        txtContacto.setEnabled(true);
        comboBoxMotivo.setEnabled(true);
        comboBoxEstado.setEnabled(true);
        txtObser.setEnabled(true);
    }
    
     void habilitarNuevo() {

        buttonBuscarPedido.setEnabled(true);
        buttonPedido.setEnabled(true);
        buttonBuscarOrden.setEnabled(false);
        buttonLimpiarTodo.setEnabled(true);
        buttonNuevo.setEnabled(false);
        buttonRegistrar.setEnabled(false);
        buttonModificar.setEnabled(false);
        buttonGuardar.setEnabled(false);
        buttonEliminar.setEnabled(false);
        buttonOrden.setEnabled(false);
        buttonVisual.setEnabled(false);
        buttonSiguiente.setEnabled(false);
        buttonAnterior.setEnabled(false);

        txtNumPedido.setEnabled(true);
        txtNumCot.setEnabled(false);
        txtNumOrden.setEnabled(false);
        txtFecha.setEnabled(false);
        txtCliente.setEnabled(false);
        txtRuc.setEnabled(false);
        txtDireccion.setEnabled(false);
        txtContacto.setEnabled(false);
        comboBoxMotivo.setEnabled(true);
        comboBoxEstado.setEnabled(true);
        txtObser.setEnabled(true);
        
    }

      void habilitarBuscarPedido() {

        buttonBuscarPedido.setEnabled(false);
        buttonPedido.setEnabled(false);
        buttonBuscarOrden.setEnabled(false);
        buttonLimpiarTodo.setEnabled(true);
        buttonNuevo.setEnabled(false);
        buttonRegistrar.setEnabled(true);
        buttonModificar.setEnabled(false);
        buttonGuardar.setEnabled(false);
        buttonEliminar.setEnabled(false);
        buttonOrden.setEnabled(false);
        buttonVisual.setEnabled(false);
        buttonSiguiente.setEnabled(false);
        buttonAnterior.setEnabled(false);

        txtNumPedido.setEnabled(true);
        txtNumCot.setEnabled(false);
        txtNumOrden.setEnabled(false);
        txtFecha.setEnabled(false);
        txtCliente.setEnabled(false);
        txtRuc.setEnabled(false);
        txtDireccion.setEnabled(false);
        txtContacto.setEnabled(false);
        comboBoxMotivo.setEnabled(true);
        comboBoxEstado.setEnabled(true);
        txtObser.setEnabled(true);
        
    }
     
    void habilitarRegistrar() {

        buttonBuscarPedido.setEnabled(false);
        buttonPedido.setEnabled(false);
        buttonBuscarOrden.setEnabled(false);
        buttonLimpiarTodo.setEnabled(true);
        buttonNuevo.setEnabled(false);
        buttonRegistrar.setEnabled(false);
        buttonModificar.setEnabled(true);
        buttonGuardar.setEnabled(false);
        buttonEliminar.setEnabled(true);
        buttonOrden.setEnabled(true);
        buttonVisual.setEnabled(true);
        buttonSiguiente.setEnabled(true);
        buttonAnterior.setEnabled(true);

        txtNumPedido.setEnabled(false);
        txtNumCot.setEnabled(false);
        txtNumOrden.setEnabled(false);
        txtFecha.setEnabled(false);
        txtCliente.setEnabled(false);
        txtRuc.setEnabled(false);
        txtDireccion.setEnabled(false);
        txtContacto.setEnabled(false);
        comboBoxMotivo.setEnabled(false);
        comboBoxEstado.setEnabled(false);
        txtObser.setEnabled(false);
    }

    void habilitarModificar() {

        buttonBuscarPedido.setEnabled(true);
        buttonPedido.setEnabled(true);
        buttonBuscarOrden.setEnabled(false);
        buttonLimpiarTodo.setEnabled(true);
        buttonNuevo.setEnabled(false);
        buttonRegistrar.setEnabled(false);
        buttonModificar.setEnabled(false);
        buttonGuardar.setEnabled(true);
        buttonEliminar.setEnabled(false);
        buttonOrden.setEnabled(false);
        buttonVisual.setEnabled(false);
        buttonSiguiente.setEnabled(false);
        buttonAnterior.setEnabled(false);

        txtNumPedido.setEnabled(true);
        txtNumCot.setEnabled(false);
        txtNumOrden.setEnabled(true);
        txtFecha.setEnabled(true);
        txtCliente.setEnabled(true);
        txtRuc.setEnabled(true);
        txtDireccion.setEnabled(true);
        txtContacto.setEnabled(true);
        comboBoxMotivo.setEnabled(true);
        comboBoxEstado.setEnabled(true);
        txtObser.setEnabled(true);
    }

    void habilitarGuardar() {

        buttonBuscarPedido.setEnabled(false);
        buttonPedido.setEnabled(false);
        buttonBuscarOrden.setEnabled(false);
        buttonLimpiarTodo.setEnabled(true);
        buttonNuevo.setEnabled(false);
        buttonRegistrar.setEnabled(false);
        buttonModificar.setEnabled(true);
        buttonGuardar.setEnabled(false);
        buttonEliminar.setEnabled(true);
        buttonOrden.setEnabled(true);
        buttonVisual.setEnabled(true);
        buttonSiguiente.setEnabled(true);
        buttonAnterior.setEnabled(true);

        txtNumPedido.setEnabled(false);
        txtNumCot.setEnabled(false);
        txtNumOrden.setEnabled(false);
        txtFecha.setEnabled(false);
        txtCliente.setEnabled(false);
        txtRuc.setEnabled(false);
        txtDireccion.setEnabled(false);
        txtContacto.setEnabled(false);
        comboBoxMotivo.setEnabled(false);
        comboBoxEstado.setEnabled(false);
        txtObser.setEnabled(false);
    }

    void habilitarEliminar() {

        buttonBuscarPedido.setEnabled(false);
        buttonPedido.setEnabled(false);
        buttonBuscarOrden.setEnabled(true);
        buttonLimpiarTodo.setEnabled(true);
        buttonNuevo.setEnabled(true);
        buttonRegistrar.setEnabled(false);
        buttonModificar.setEnabled(false);
        buttonGuardar.setEnabled(false);
        buttonEliminar.setEnabled(false);
        buttonOrden.setEnabled(false);
        buttonVisual.setEnabled(false);
        buttonSiguiente.setEnabled(false);
        buttonAnterior.setEnabled(false);

        txtNumPedido.setEnabled(false);
        txtNumCot.setEnabled(false);
        txtNumOrden.setEnabled(true);
        txtFecha.setEnabled(false);
        txtCliente.setEnabled(false);
        txtRuc.setEnabled(false);
        txtDireccion.setEnabled(false);
        txtContacto.setEnabled(false);
        comboBoxMotivo.setEnabled(false);
        comboBoxEstado.setEnabled(false);
        txtObser.setEnabled(false);
    }
  // --------------- método que jala el número de pedido -----------------------
     static void NumPedidoParaOrden() {
        PedidosOrdenCorte.numeroPedido = Integer.parseInt(PedidosOrdenCorte.txtNumPedido.getText());
        System.out.println(PedidosOrdenCorte.numeroPedido);
        txtNumPedido.setText(String.format("%06d", PedidosOrdenCorte.numeroPedido));
    }
  //----------------------------- Consultar Info ------------------------ 
     
      private void consultarCodigoProformaInfo(int idP) throws Exception {

        proforma = proformacontroler.ProformaBuscar1(idP);
        if (proforma != null) {

            numCotizacion = proforma.getCodProforma();
          //  OrdenCorteInfo.labelNumCotizacion.setText(proforma.getCodProforma());
            
            //codProformaParaDetalle= proforma.getCodProforma();

        } else {
            //JOptionPane.showMessageDialog(null, "Contacto no registrado");
            //System.out.println("Error");
        }
    }
     
    private void consultarPedidoYNumCotizacionParaOrdenCorteInfo(int ped) throws Exception {
        pedido = pedidocontroler.PedidoBuscarNumPedAll(ped);
        if (pedido != null) {

            idPed = pedido.getIdPedido();
            idProf=pedido.getIdProforma();
            consultarCodigoProformaInfo(idProf);
          //  OrdenCorteInfo.labelNumCotizacion.setText(proforma.getCodProforma());
            
        } else {
            JOptionPane.showMessageDialog(null, "Pedido no registrado");
            //System.out.println("Error");
        }
    }
     
     private void consultarContactoClienteInfo() throws Exception {

        pro1 = obj1.ContactoClienteBuscar2(idConCli);
        if (pro1 != null) {

            String nombre = pro1.getNombres();
            String apellido = pro1.getApellidos();
            String contacto = nombre + " " + apellido;

        } else {
            //JOptionPane.showMessageDialog(null, "Contacto no registrado");
            //System.out.println("Error");
        }
    }
    
    
    
    private void consultarClienteInfo() throws Exception {
        pro = obj.ClienteBuscar1(idCli);
        if (pro != null) {

        } else {
            JOptionPane.showMessageDialog(null, "Cliente no registrado");
            //System.out.println("Error");
        }
    } 
    
    
    private void consultarPedidoInfo(int idpedido) throws Exception {
        pedido = pedidocontroler.PedidoBuscarNumPedAll(idpedido);
        if (pedido != null) {

            idPed = pedido.getIdPedido();
            numPedido=pedido.getNumPedido();
            idCli = pedido.getIdCliente();
            consultarClienteInfo();

            idConCli = pedido.getIdContactoCliente();
            consultarContactoClienteInfo();

        } else {
            JOptionPane.showMessageDialog(null, "Pedido no registrado");
            //System.out.println("Error");
        }
    }
    
    
    
    
     private void consultarOrdenCorteInfo() throws Exception {
        pro3 = obj3.OrdenCorteBuscarInfo(numOrden);
        if (pro3 != null) {
            
            OrdenCorteInfo.labelNumOrdenCorte.setText(pro3.getNumOrdCort());
            idOrdCort=pro3.getIdOrdenCorte();
                       
            idPed = pro3.getIdPedido();
            consultarPedidoInfo(idPed);
            consultarPedidoYNumCotizacionParaOrdenCorteInfo(idPed);
            OrdenCorteInfo.labelNumCotizacion.setText(numCotizacion);
            OrdenCorteInfo.fechaOrdenCorte.setText(pro3.getFecha());
            OrdenCorteInfo.labelMotivo.setText(pro3.getMotivo());
            

        } else {
            JOptionPane.showMessageDialog(null, "Orden Corte no registrada");
            //System.out.println("Error");
        }
    }

//------------------------ metodo para jalar numero de pedido desde Pedidos Vista ------------------------------
     static void numPedidoOrden(){
         txtNumPedido.setText(PedidosVista.numero);           
     }
     
//------------------------ metodo para jalar numero de pedido desde Pedidos Vista ------------------------------
    static void numDesdePedido(){
         txtNumPedido.setText(Integer.toString(Pedidos.numPedParaDetalle));
    }     
 //------------------------ metodo para jalar numero de pedido desde Orden Corte Vista ------------------------------
     static void numOrdenVista(){
         OrdenesCorteVista.numOrden=OrdenesCorteVista.txtNumOrden.getText();
         txtNumOrden.setText(OrdenesCorteVista.numOrden);   
     }
}

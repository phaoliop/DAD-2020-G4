/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import controller.CajaChicaController;
import database.AccesoDB;
import entity.CajaChica;
import exportarexcel.clsExportarExcel;
import java.io.IOException;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.Format;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import reportes.GenerarReporte;

/**
 *
 * @author ARCRODINPC-06
 */
public final class ExportarCajaChica extends javax.swing.JInternalFrame {

    /**
     * Creates new form ExportarCajaChica
     */
    String comboMes;
    String anio;
    int anioJC;
    
    public ExportarCajaChica() throws SQLException, ClassNotFoundException, ParseException {
        initComponents();
        limpiar();
        jDateChooserIni.setCalendar(diaConvertir(fechaActual()));
        jDateChooserFin.setCalendar(diaConvertir(fechaActual()));
        labelTotalEgresos.setText("00000000.00");
        labelTotalIngresos.setText("00000000.00");
        labelSaldo.setText("00000000.00");
        
        listaCajaChica();          
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        comboBoxMes = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        buttonCerrar = new javax.swing.JButton();
        buttonLimpiar = new javax.swing.JButton();
        labelTotalIngresos = new javax.swing.JLabel();
        labelTotalEgresos = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        labelSaldo = new javax.swing.JLabel();
        buttonExportExcel = new javax.swing.JButton();
        ButtonBuscarPorFecha = new javax.swing.JButton();
        buttonPdf = new javax.swing.JButton();
        jYearChooserAnio = new com.toedter.calendar.JYearChooser();
        jDateChooserIni = new com.toedter.calendar.JDateChooser();
        jDateChooserFin = new com.toedter.calendar.JDateChooser();

        setClosable(true);
        setTitle("Exportar Reporte Caja Chica");
        setToolTipText("");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "idCaja", "Fecha", "Descripción", "Egreso", "Ingreso"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(15);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(450);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(100);
        }

        jLabel3.setText("Año:");

        jLabel4.setText("Mes:");

        comboBoxMes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MES", "ENERO", "FEBRERO", "MARZO", "ABRIL", "MAYO", "JUNIO", "JULIO", "AGOSTO", "SETIEMBRE", "OCTUBRE", "NOVIEMBRE", "DICIEMBRE" }));
        comboBoxMes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxMesItemStateChanged(evt);
            }
        });

        jLabel5.setText("Fecha Inicio:");

        jLabel6.setText("Fecha Fin:");

        buttonCerrar.setText(" Cerrar");
        buttonCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCerrarActionPerformed(evt);
            }
        });

        buttonLimpiar.setText("Limpiar");
        buttonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLimpiarActionPerformed(evt);
            }
        });

        labelTotalIngresos.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelTotalIngresos.setText("00000000.00");

        labelTotalEgresos.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelTotalEgresos.setText("000000000.00");

        jLabel7.setText("Total:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Saldo:");

        labelSaldo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelSaldo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labelSaldo.setText("00000000.00");

        buttonExportExcel.setText("Exportar Excel");
        buttonExportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExportExcelActionPerformed(evt);
            }
        });

        ButtonBuscarPorFecha.setText("Buscar ");
        ButtonBuscarPorFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonBuscarPorFechaActionPerformed(evt);
            }
        });

        buttonPdf.setText("Export PDF");
        buttonPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPdfActionPerformed(evt);
            }
        });

        jDateChooserIni.setDateFormatString("yyyy-MM-dd");

        jDateChooserFin.setDateFormatString("yyyy-MM-dd");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonCerrar)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jDateChooserIni, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateChooserFin, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jYearChooserAnio, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboBoxMes, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(110, 110, 110)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ButtonBuscarPorFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonPdf, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonExportExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(491, 491, 491)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelSaldo)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelTotalEgresos, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(labelTotalIngresos, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonLimpiar, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jYearChooserAnio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4)
                                .addComponent(comboBoxMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(buttonExportExcel)
                            .addComponent(ButtonBuscarPorFecha)
                            .addComponent(buttonPdf)
                            .addComponent(jLabel6))
                        .addComponent(jDateChooserFin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jDateChooserIni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTotalIngresos)
                    .addComponent(labelTotalEgresos)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(labelSaldo))
                .addGap(21, 21, 21)
                .addComponent(buttonCerrar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCerrarActionPerformed
        dispose();
    }//GEN-LAST:event_buttonCerrarActionPerformed

    private void comboBoxMesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxMesItemStateChanged
        comboMes=comboBoxMes.getSelectedItem().toString();
        if(comboBoxMes.getSelectedItem() == "ENERO"){
            
            anioJC = jYearChooserAnio.getYear();
            anio=Integer.toString(anioJC);
            
            try {
                jDateChooserIni.setCalendar(diaConvertir(anio+"-01-01"));
                jDateChooserFin.setCalendar(diaConvertir(anio+"-01-31"));
            } catch (ParseException ex) {
                Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            listaCajaChicaFechas(convertirFechaString(jDateChooserIni.getDate()),convertirFechaString(jDateChooserFin.getDate()));
            try {
                consultarSumaTotalFechas(convertirFechaString(jDateChooserIni.getDate()),convertirFechaString(jDateChooserFin.getDate()));
            } catch (Exception ex) {
                Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
            }
            System.out.println("anioooo: "+anioJC);
            
        }else if(comboBoxMes.getSelectedItem() == "FEBRERO"){
            anioJC = jYearChooserAnio.getYear();
            anio=Integer.toString(anioJC);
             try {
                jDateChooserIni.setCalendar(diaConvertir(anio+"-02-01"));
                jDateChooserFin.setCalendar(diaConvertir(anio+"-02-29"));
            } catch (ParseException ex) {
                Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            listaCajaChicaFechas(convertirFechaString(jDateChooserIni.getDate()),convertirFechaString(jDateChooserFin.getDate()));
            try {
                consultarSumaTotalFechas(convertirFechaString(jDateChooserIni.getDate()),convertirFechaString(jDateChooserFin.getDate()));
            } catch (Exception ex) {
                Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }else if(comboBoxMes.getSelectedItem() == "MARZO"){
            anioJC = jYearChooserAnio.getYear();
            anio=Integer.toString(anioJC);
             try {
                jDateChooserIni.setCalendar(diaConvertir(anio+"-03-01"));
                jDateChooserFin.setCalendar(diaConvertir(anio+"-03-31"));
            } catch (ParseException ex) {
                Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            listaCajaChicaFechas(convertirFechaString(jDateChooserIni.getDate()),convertirFechaString(jDateChooserFin.getDate()));
            try {
                consultarSumaTotalFechas(convertirFechaString(jDateChooserIni.getDate()),convertirFechaString(jDateChooserFin.getDate()));
            } catch (Exception ex) {
                Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }else if(comboBoxMes.getSelectedItem() == "ABRIL"){
            anioJC = jYearChooserAnio.getYear();
            anio=Integer.toString(anioJC);
             try {
                jDateChooserIni.setCalendar(diaConvertir(anio+"-04-01"));
                jDateChooserFin.setCalendar(diaConvertir(anio+"-04-30"));
            } catch (ParseException ex) {
                Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            listaCajaChicaFechas(convertirFechaString(jDateChooserIni.getDate()),convertirFechaString(jDateChooserFin.getDate()));
            try {
                consultarSumaTotalFechas(convertirFechaString(jDateChooserIni.getDate()),convertirFechaString(jDateChooserFin.getDate()));
            } catch (Exception ex) {
                Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }else if(comboBoxMes.getSelectedItem() == "MAYO"){
            anioJC = jYearChooserAnio.getYear();
            anio=Integer.toString(anioJC);
            try {
                jDateChooserIni.setCalendar(diaConvertir(anio + "-05-01"));
                jDateChooserFin.setCalendar(diaConvertir(anio + "-05-31"));
            } catch (ParseException ex) {
                Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
            }

            listaCajaChicaFechas(convertirFechaString(jDateChooserIni.getDate()), convertirFechaString(jDateChooserFin.getDate()));
            try {
                consultarSumaTotalFechas(convertirFechaString(jDateChooserIni.getDate()), convertirFechaString(jDateChooserFin.getDate()));
            } catch (Exception ex) {
                Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
            }
            System.out.println("anioooo: " + anioJC);
        }else if(comboBoxMes.getSelectedItem() == "JUNIO"){
            anioJC = jYearChooserAnio.getYear();
            anio=Integer.toString(anioJC);
             try {
                jDateChooserIni.setCalendar(diaConvertir(anio+"-06-01"));
                jDateChooserFin.setCalendar(diaConvertir(anio+"-06-30"));
            } catch (ParseException ex) {
                Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            listaCajaChicaFechas(convertirFechaString(jDateChooserIni.getDate()),convertirFechaString(jDateChooserFin.getDate()));
            try {
                consultarSumaTotalFechas(convertirFechaString(jDateChooserIni.getDate()),convertirFechaString(jDateChooserFin.getDate()));
            } catch (Exception ex) {
                Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }else if(comboBoxMes.getSelectedItem() == "JULIO"){
            anioJC = jYearChooserAnio.getYear();
            anio=Integer.toString(anioJC);
            try {
                jDateChooserIni.setCalendar(diaConvertir(anio+"-07-01"));
                jDateChooserFin.setCalendar(diaConvertir(anio+"-07-31"));
            } catch (ParseException ex) {
                Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            listaCajaChicaFechas(convertirFechaString(jDateChooserIni.getDate()),convertirFechaString(jDateChooserFin.getDate()));
            try {
                consultarSumaTotalFechas(convertirFechaString(jDateChooserIni.getDate()),convertirFechaString(jDateChooserFin.getDate()));
            } catch (Exception ex) {
                Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }else if(comboBoxMes.getSelectedItem() == "AGOSTO"){
            anioJC = jYearChooserAnio.getYear();
            anio=Integer.toString(anioJC);
             try {
                jDateChooserIni.setCalendar(diaConvertir(anio+"-08-01"));
                jDateChooserFin.setCalendar(diaConvertir(anio+"-08-31"));
            } catch (ParseException ex) {
                Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            listaCajaChicaFechas(convertirFechaString(jDateChooserIni.getDate()),convertirFechaString(jDateChooserFin.getDate()));
            try {
                consultarSumaTotalFechas(convertirFechaString(jDateChooserIni.getDate()),convertirFechaString(jDateChooserFin.getDate()));
            } catch (Exception ex) {
                Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }else if(comboBoxMes.getSelectedItem() == "SETIEMBRE"){
            anioJC = jYearChooserAnio.getYear();
            anio=Integer.toString(anioJC);
            try {
                jDateChooserIni.setCalendar(diaConvertir(anio+"-09-01"));
                jDateChooserFin.setCalendar(diaConvertir(anio+"-09-30"));
            } catch (ParseException ex) {
                Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            listaCajaChicaFechas(convertirFechaString(jDateChooserIni.getDate()),convertirFechaString(jDateChooserFin.getDate()));
            try {
                consultarSumaTotalFechas(convertirFechaString(jDateChooserIni.getDate()),convertirFechaString(jDateChooserFin.getDate()));
            } catch (Exception ex) {
                Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }else if(comboBoxMes.getSelectedItem() == "OCTUBRE"){
            anioJC = jYearChooserAnio.getYear();
            anio=Integer.toString(anioJC);
            try {
                jDateChooserIni.setCalendar(diaConvertir(anio+"-10-01"));
                jDateChooserFin.setCalendar(diaConvertir(anio+"-10-31"));
            } catch (ParseException ex) {
                Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            listaCajaChicaFechas(convertirFechaString(jDateChooserIni.getDate()),convertirFechaString(jDateChooserFin.getDate()));
            try {
                consultarSumaTotalFechas(convertirFechaString(jDateChooserIni.getDate()),convertirFechaString(jDateChooserFin.getDate()));
            } catch (Exception ex) {
                Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }else if(comboBoxMes.getSelectedItem() == "NOVIEMBRE"){
            anioJC = jYearChooserAnio.getYear();
            anio=Integer.toString(anioJC);
            try {
                jDateChooserIni.setCalendar(diaConvertir(anio+"-11-01"));
                jDateChooserFin.setCalendar(diaConvertir(anio+"-11-30"));
            } catch (ParseException ex) {
                Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            listaCajaChicaFechas(convertirFechaString(jDateChooserIni.getDate()),convertirFechaString(jDateChooserFin.getDate()));
            try {
                consultarSumaTotalFechas(convertirFechaString(jDateChooserIni.getDate()),convertirFechaString(jDateChooserFin.getDate()));
            } catch (Exception ex) {
                Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }else if(comboBoxMes.getSelectedItem() == "DICIEMBRE"){
            anioJC = jYearChooserAnio.getYear();
            anio=Integer.toString(anioJC);
            try {
                jDateChooserIni.setCalendar(diaConvertir(anio+"-12-01"));
                jDateChooserFin.setCalendar(diaConvertir(anio+"-12-31"));
            } catch (ParseException ex) {
                Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            listaCajaChicaFechas(convertirFechaString(jDateChooserIni.getDate()),convertirFechaString(jDateChooserFin.getDate()));
            try {
                consultarSumaTotalFechas(convertirFechaString(jDateChooserIni.getDate()),convertirFechaString(jDateChooserFin.getDate()));
            } catch (Exception ex) {
                Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if(comboBoxMes.getSelectedItem() == "MES"){
            System.out.println("xxxxxxxxxxxxxxxxxxxxx");
            try {
                jDateChooserIni.setCalendar(diaConvertir(fechaActual()));
                jDateChooserFin.setCalendar(diaConvertir(fechaActual()));
            } catch (ParseException ex) {
                Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            labelTotalEgresos.setText("00000000.00");
            labelTotalIngresos.setText("00000000.00");
            labelSaldo.setText("00000000.00");
    
        }
    }//GEN-LAST:event_comboBoxMesItemStateChanged

    private void buttonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLimpiarActionPerformed
        try {
            jDateChooserIni.setCalendar(diaConvertir(fechaActual()));
            jDateChooserFin.setCalendar(diaConvertir(fechaActual()));
        } catch (ParseException ex) {
            Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
        };
        labelTotalEgresos.setText("00000000.00");
        labelTotalIngresos.setText("00000000.00");
        labelSaldo.setText("00000000.00");
        limpiar();
        listaCajaChica();
    }//GEN-LAST:event_buttonLimpiarActionPerformed

    private void ButtonBuscarPorFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonBuscarPorFechaActionPerformed
        listaCajaChicaFechas(convertirFechaString(jDateChooserIni.getDate()), convertirFechaString(jDateChooserFin.getDate()));
        try {
            consultarSumaTotalFechas(convertirFechaString(jDateChooserIni.getDate()), convertirFechaString(jDateChooserFin.getDate()));
        } catch (Exception ex) {
            Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ButtonBuscarPorFechaActionPerformed

    private void buttonExportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExportExcelActionPerformed
       clsExportarExcel obj = new clsExportarExcel();
        try {
            obj.exportarExcel(jTable1);
        } catch (IOException ex) {
            Logger.getLogger(CajaChicaRegistro.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonExportExcelActionPerformed

    private void buttonPdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPdfActionPerformed
        String dia1 = null, dia2 = null,mes1 = null, mes2 = null, anioR;
        
        dia1 = String.format("%02d", jDateChooserIni.getCalendar().get(Calendar.DAY_OF_MONTH));
        dia2 = String.format("%02d", jDateChooserFin.getCalendar().get(Calendar.DAY_OF_MONTH));
        mes1 = String.format("%02d",jDateChooserIni.getCalendar().get(Calendar.MONTH) + 1);
        mes2 = String.format("%02d",jDateChooserFin.getCalendar().get(Calendar.MONTH) + 1);
        
        anioR=Integer.toString(jYearChooserAnio.getYear());
        
        GenerarReporte cajRep=new GenerarReporte();
        try {
            cajRep.ReporteCajaChica(convertirFechaString(jDateChooserIni.getDate()), convertirFechaString(jDateChooserFin.getDate()),dia1, dia2,mes1, mes2, anioR);
        } catch (SQLException ex) {
            Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ExportarCajaChica.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonPdfActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonBuscarPorFecha;
    private javax.swing.JButton buttonCerrar;
    private javax.swing.JButton buttonExportExcel;
    private javax.swing.JButton buttonLimpiar;
    private javax.swing.JButton buttonPdf;
    private javax.swing.JComboBox<String> comboBoxMes;
    private com.toedter.calendar.JDateChooser jDateChooserFin;
    private com.toedter.calendar.JDateChooser jDateChooserIni;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private com.toedter.calendar.JYearChooser jYearChooserAnio;
    private javax.swing.JLabel labelSaldo;
    private javax.swing.JLabel labelTotalEgresos;
    private javax.swing.JLabel labelTotalIngresos;
    // End of variables declaration//GEN-END:variables

CajaChicaController cajaController=new CajaChicaController();
CajaChica caja;

//------------------------------- Tabla -----------------------------------------
 void listaCajaChicaFechas(String fechIni, String fechFin) {
        List<CajaChica> lista;
        try {
            lista =  cajaController.CajaChicaBuscarFechas(fechIni, fechFin);
            verCajaChicaFechas(lista);

        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, e.getMessage());
            System.out.println("ERROR: " + e.getMessage());
        }
    }

     private void verCajaChicaFechas(List<CajaChica> lista) {

        DefaultTableModel tabla = (DefaultTableModel) jTable1.getModel();
        tabla.setRowCount(0);
        for (CajaChica cajChic : lista) {
            Object[] fila = {cajChic.getIdCajaChica(),cajChic.getFechaCaja(), cajChic.getDescripCaja(), cajChic.getEgreso(), cajChic.getIngreso()};
            tabla.addRow(fila);

        }
    }
     
 void listaCajaChica() {
        List<CajaChica> lista;
        try {
            lista = cajaController.CajaChicaListar();
            verCajaChica(lista);

        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, e.getMessage());
            System.out.println("ERROR: " + e.getMessage());
        }
    }

     private void verCajaChica(List<CajaChica> lista) {

        DefaultTableModel tabla = (DefaultTableModel) jTable1.getModel();
        tabla.setRowCount(0);
        for (CajaChica cajChic : lista) {
            Object[] fila = {cajChic.getIdCajaChica(),cajChic.getFechaCaja(), cajChic.getDescripCaja(), cajChic.getEgreso(), cajChic.getIngreso()};
            tabla.addRow(fila);

        }
    }
     
// ----------------------- Limpiar -------------------------------------
void limpiar(){
    comboBoxMes.setSelectedIndex(0);
    }     
//------------------------------Calcular Suma -----------------------
 void consultarSumaTotalFechas(String fechI, String fechF) throws Exception {
        caja = cajaController.CajaChicaCalcularFechas(fechI, fechF);

        if (caja != null) {
            if (caja.getTotalEgreso() != null) {
                labelTotalEgresos.setText(caja.getTotalEgreso());
            } else {
                labelTotalEgresos.setText("00000000.00");
            }
            if (caja.getTotalIngreso() != null) {
                 labelTotalIngresos.setText(caja.getTotalIngreso());
            } else {
                 labelTotalIngresos.setText("00000000.00");
            }
            if (caja.getDiferencia() != null) {
                labelSaldo.setText(caja.getDiferencia());
            } else {
                labelSaldo.setText("00000000.00");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Operacion Invalida");
            //System.out.println("Error");
        }
    }
 
  public void eliminar(){
        DefaultTableModel tb = (DefaultTableModel) jTable1.getModel();
        tb.setRowCount(0);
    }
  
   public String diaFecha(String f) throws ParseException {
        Calendar fecha = Calendar.getInstance();
        SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
        Date fechaDate = null;

        fechaDate = formato.parse(f);

        SimpleDateFormat formatofecha = new SimpleDateFormat("dd");
        return formatofecha.format(fechaDate);
    }
   
   public String mesFecha(String f) throws ParseException {
        Calendar fecha = Calendar.getInstance();
        SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
        Date fechaDate = null;

        fechaDate = formato.parse(f);

        SimpleDateFormat formatofecha = new SimpleDateFormat("MM");
        return formatofecha.format(fechaDate);
    }
   
   public String anioFecha(String f) throws ParseException {
        Calendar fecha = Calendar.getInstance();
        SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
        Date fechaDate = null;

        fechaDate = formato.parse(f);

        SimpleDateFormat formatofecha = new SimpleDateFormat("yyyy");
        return formatofecha.format(fechaDate);
       
    }
   
    Calendar diaConvertir(String ah) throws ParseException{
   
       Calendar fecha = Calendar.getInstance();
        SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
        Date fechaDate = null;

        fechaDate=formato.parse(ah);

        fecha.setTime(fechaDate);
        
        return fecha;
    }
    
    String convertirFechaString(Date fech) {

        Format formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

        return formatter.format(fech);
    }
    
    public String fechaActual() {
        Date fecha = new Date();

        SimpleDateFormat formatofecha = new SimpleDateFormat("yyyy-MM-dd");
        return formatofecha.format(fecha);
    }
}

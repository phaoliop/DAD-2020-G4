/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import controller.ClienteController;
import controller.ContactoClienteController;
import controller.DetalleOrdenCorteController;
import controller.OrdenCorteController;
import controller.PedidoController;
import controller.ProformaController;
import entity.Cliente;
import entity.ContactoCliente;
import entity.DetalleOrdenCorte;
import entity.OrdenCorte;
import entity.Pedido;
import entity.Proforma;
import exportarexcel.clsExportarExcel;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ARCRODINPC-06
 */
public class OrdenesCorteVista extends javax.swing.JInternalFrame {
    
    int tabla;
    static String numOrden;
    static int idOrdCort;
    int idPed;
    int numPedido;
    int idCli;
    int idConCli;
    String filtro="C.razonSocial";
    String fecha;
    String anioCadena;
    int anio;
    String motivo;
    String estado;
    String estadoCombo;
    
    int idProf;
    String numCotizacion;
    
    
    /**
     * Creates new form OrdenesCorteVista
     */
    public OrdenesCorteVista() {
        initComponents();
        listaOrdenCorte(filtro);
        habilitarInicio();
        jTable1.setDefaultRenderer (Object.class, new RowsRenderer());
    }

    public class RowsRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable jTable1, Object value, boolean selected, boolean focused, int row, int column) {
//            jTable1.setBackground(Color.white);
//            jTable1.setForeground(Color.black);
            super.getTableCellRendererComponent(jTable1, value, selected, focused, row, column);
            if ("ENVIADO".equals((jTable1.getValueAt(row, column)))) {
                this.setOpaque(true);
                this.setForeground(Color.decode("#009900"));//verde
                
            } else if ("PENDIENTE".equals((jTable1.getValueAt(row, column)))) {
                this.setOpaque(true);
                this.setForeground(Color.decode("#CCCC00"));
                
            } else if ("ANULADO".equals((jTable1.getValueAt(row, column)))) {
                this.setOpaque(true);
                this.setForeground(Color.RED);
                
            } else if ((!"ANULADO".equals((jTable1.getValueAt(row, column)))) && 
                       (!"PENDIENTE".equals((jTable1.getValueAt(row, column))) &&
                       (!"ENVIADO".equals((jTable1.getValueAt(row, column)))))) {
                this.setOpaque(true);
                this.setForeground(Color.BLACK);
            }
            
            if (selected) {
                setBackground(Color.decode("#39698a"));
                setForeground(Color.decode("#FFFFFF"));
            } else{
                setBackground(Color.WHITE);
            }
            
            return this;
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        buttonCerrar = new javax.swing.JButton();
        txtFiltro = new javax.swing.JTextField();
        comboBoxFiltro = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        buttonVerOrden = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtNumOrden = new javax.swing.JTextField();
        txtNumPed = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtFecha = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtMotivo = new javax.swing.JTextField();
        txtCliente = new javax.swing.JTextField();
        buttonModificarEnOrden = new javax.swing.JButton();
        buttonLimpiar = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtCodCot = new javax.swing.JTextField();
        buttonExportExcel = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        comboBoxEstado = new javax.swing.JComboBox<>();
        txtObser = new javax.swing.JTextField();
        buttonModificar = new javax.swing.JButton();
        buttonGuardar = new javax.swing.JButton();

        setClosable(true);
        setTitle("Vista de Ordenes de Corte");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Num. Ord. Corte", "Razon Social", "Num. Ped.", "Fecha de Orden Corte", "Estado", "Observación"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(325);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(80);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(150);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(120);
        }

        buttonCerrar.setText("Cerrar");
        buttonCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCerrarActionPerformed(evt);
            }
        });

        txtFiltro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFiltroKeyReleased(evt);
            }
        });

        comboBoxFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECCIONAR", "RAZON SOCIAL", "NUM. COTIZACION", "NUM. ORDEN", "FECHA" }));
        comboBoxFiltro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxFiltroItemStateChanged(evt);
            }
        });

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "COD. ARTICULO", "COD. UBICACION", "CANT", "DIAMETRO (MM)", "LONGITUD (MM)", "PROCEDENCIA", "idDet"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable3.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane3.setViewportView(jTable3);
        if (jTable3.getColumnModel().getColumnCount() > 0) {
            jTable3.getColumnModel().getColumn(0).setPreferredWidth(115);
            jTable3.getColumnModel().getColumn(1).setPreferredWidth(115);
            jTable3.getColumnModel().getColumn(2).setPreferredWidth(45);
            jTable3.getColumnModel().getColumn(3).setPreferredWidth(150);
            jTable3.getColumnModel().getColumn(4).setPreferredWidth(130);
            jTable3.getColumnModel().getColumn(5).setPreferredWidth(130);
            jTable3.getColumnModel().getColumn(6).setPreferredWidth(25);
        }

        buttonVerOrden.setText("Ver Orden Corte");
        buttonVerOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonVerOrdenActionPerformed(evt);
            }
        });

        jLabel1.setText("Num. Orden Corte:");

        jLabel3.setText("Cliente:");

        jLabel4.setText("Pedido N°:");

        jLabel2.setText("Fecha de Ord. Corte:");

        jLabel5.setText("Motivo:");

        buttonModificarEnOrden.setText("Modificar en Orden Corte");
        buttonModificarEnOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonModificarEnOrdenActionPerformed(evt);
            }
        });

        buttonLimpiar.setText("Limpiar");
        buttonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLimpiarActionPerformed(evt);
            }
        });

        jLabel8.setText("Cotización N°:");

        buttonExportExcel.setText("ExportExcel");
        buttonExportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExportExcelActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel6.setText("Estado:");

        jLabel7.setText("Observación:");

        comboBoxEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECCIONAR", "ENVIADO", "PENDIENTE", "ANULADO" }));
        comboBoxEstado.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxEstadoItemStateChanged(evt);
            }
        });
        comboBoxEstado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                comboBoxEstadoKeyReleased(evt);
            }
        });

        buttonModificar.setText("Modificar");
        buttonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonModificarActionPerformed(evt);
            }
        });

        buttonGuardar.setText("Guardar");
        buttonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGuardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboBoxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtObser, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonModificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(79, 79, 79))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(comboBoxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonModificar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtObser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonGuardar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 710, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(buttonCerrar))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonModificarEnOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buttonVerOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(buttonExportExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtNumOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtNumPed, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(16, 16, 16))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtCodCot, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtMotivo, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comboBoxFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(buttonLimpiar))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 901, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonLimpiar)
                    .addComponent(buttonExportExcel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4)
                            .addComponent(txtNumOrden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNumPed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txtCodCot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMotivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(buttonVerOrden)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonModificarEnOrden)
                        .addGap(67, 67, 67)
                        .addComponent(buttonCerrar)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCerrarActionPerformed
       dispose();
    }//GEN-LAST:event_buttonCerrarActionPerformed

    private void txtFiltroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFiltroKeyReleased
       listaOrdenCorte(filtro);
    }//GEN-LAST:event_txtFiltroKeyReleased

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        tabla = jTable1.getSelectedRow();
        numOrden = jTable1.getValueAt(tabla, 0).toString();// TODO add your handling code here:
        fecha=jTable1.getValueAt(tabla, 3).toString();
        System.out.println("fecha: "+fecha);
        System.out.println("num Orden: "+numOrden);     
        try {
            consultarAnioOrden(fecha,numOrden);
            System.out.println("año de la orden: "+anio);
        } catch (Exception ex) {
            Logger.getLogger(OrdenesCorteVista.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            consultarOrdenCorteTabla(numOrden, anio);
        } catch (Exception ex) {
            Logger.getLogger(OrdenesCorteVista.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("id de orden de corte: "+idOrdCort);
        listaDetalleOrdenCortePedido(idOrdCort);
        habilitarBuscar();
        
    }//GEN-LAST:event_jTable1MouseClicked

    private void comboBoxFiltroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxFiltroItemStateChanged
       if (comboBoxFiltro.getSelectedItem() == "RAZON SOCIAL") {
            filtro = "C.razonSocial";
            listaOrdenCorte(filtro);
            System.out.println(filtro);
        } else if (comboBoxFiltro.getSelectedItem() == "NUM. ORDEN") {
            filtro = "O.numOrdCort";
            listaOrdenCorte(filtro);
            System.out.println(filtro);
        } else if (comboBoxFiltro.getSelectedItem() == "NUM. COTIZACION") {
            filtro = "P.codProforma";
            listaOrdenCorte(filtro);
            System.out.println(filtro);
        } else if (comboBoxFiltro.getSelectedItem() == "FECHA") {
            filtro = "O.fecha";
            listaOrdenCorte(filtro);
            System.out.println(filtro);
        } else if (comboBoxFiltro.getSelectedItem() == "SELECCIONAR") {
            filtro = "C.razonSocial";
            listaOrdenCorte(filtro);
            System.out.println(filtro);
        } 
    }//GEN-LAST:event_comboBoxFiltroItemStateChanged

    private void buttonVerOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonVerOrdenActionPerformed
        OrdenCorteInfo ordCort = new OrdenCorteInfo();
        Principal.jDesktopPane1.add(ordCort);
        ordCort.toFront();
        ordCort.setVisible(true);
        
        try {
            consultarOrdenCorteInfo();
        } catch (Exception ex) {
            Logger.getLogger(OrdenesCorteVista.class.getName()).log(Level.SEVERE, null, ex);
        }
        OrdenCorteInfo.listaDetalleOrdenCortePedido(idOrdCort);
    }//GEN-LAST:event_buttonVerOrdenActionPerformed

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        if ((evt.getKeyCode() == KeyEvent.VK_DOWN) || (evt.getKeyCode() == KeyEvent.VK_UP)) {
            tabla = jTable1.getSelectedRow();
            numOrden = jTable1.getValueAt(tabla, 0).toString();
            fecha = jTable1.getValueAt(tabla, 3).toString();
            System.out.println("fecha: " + fecha);
            System.out.println("num Orden: " + numOrden);
            try {
                consultarAnioOrden(fecha, numOrden);
                System.out.println("año de la orden: " + anio);
            } catch (Exception ex) {
                Logger.getLogger(OrdenesCorteVista.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                consultarOrdenCorteTabla(numOrden, anio);
            } catch (Exception ex) {
                Logger.getLogger(OrdenesCorteVista.class.getName()).log(Level.SEVERE, null, ex);
            }
            listaDetalleOrdenCortePedido(idOrdCort);

        }        
    }//GEN-LAST:event_jTable1KeyReleased

    private void buttonModificarEnOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonModificarEnOrdenActionPerformed
        OrdenesCorte ordCort = new OrdenesCorte();
        Principal.jDesktopPane1.add(ordCort);
        ordCort.toFront();
        ordCort.setVisible(true);
        OrdenesCorte.numOrdenVista();
    }//GEN-LAST:event_buttonModificarEnOrdenActionPerformed

    private void buttonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGuardarActionPerformed
        procesar(2);
        listaOrdenCorte(filtro);
        habilitarGuardar();
    }//GEN-LAST:event_buttonGuardarActionPerformed

    private void comboBoxEstadoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboBoxEstadoKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxEstadoKeyReleased

    private void comboBoxEstadoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxEstadoItemStateChanged
          if (comboBoxEstado.getSelectedIndex() != 0) {
            estadoCombo = comboBoxEstado.getSelectedItem().toString();
        } else{
            estadoCombo="";
        }
    }//GEN-LAST:event_comboBoxEstadoItemStateChanged

    private void buttonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonModificarActionPerformed
        habilitarModificar();
    }//GEN-LAST:event_buttonModificarActionPerformed

    private void buttonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLimpiarActionPerformed
        limpiar();
        habilitarInicio();
    }//GEN-LAST:event_buttonLimpiarActionPerformed

    private void buttonExportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExportExcelActionPerformed
        clsExportarExcel objeto = new clsExportarExcel();
        try {
            objeto.exportarExcel(jTable1);
        } catch (IOException ex) {
            Logger.getLogger(CajaChicaRegistro.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonExportExcelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCerrar;
    private javax.swing.JButton buttonExportExcel;
    private javax.swing.JButton buttonGuardar;
    private javax.swing.JButton buttonLimpiar;
    private javax.swing.JButton buttonModificar;
    private javax.swing.JButton buttonModificarEnOrden;
    private javax.swing.JButton buttonVerOrden;
    private javax.swing.JComboBox<String> comboBoxEstado;
    private javax.swing.JComboBox<String> comboBoxFiltro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField txtCliente;
    private javax.swing.JTextField txtCodCot;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtFiltro;
    private javax.swing.JTextField txtMotivo;
    public static javax.swing.JTextField txtNumOrden;
    private javax.swing.JTextField txtNumPed;
    private javax.swing.JTextField txtObser;
    // End of variables declaration//GEN-END:variables

    OrdenCorteController obj = new OrdenCorteController();
    OrdenCorte pro;
   
    ClienteController obj2 = new ClienteController();
    Cliente pro2;
    
    ContactoClienteController obj3 = new ContactoClienteController();
    ContactoCliente pro3;
    
    ProformaController proformacontroler=new ProformaController();
    Proforma proforma;
    
    PedidoController pedidocontroler=new PedidoController();
    Pedido pedido;
    
    DetalleOrdenCorteController obj4 = new DetalleOrdenCorteController();
    DetalleOrdenCorte pro4;
    
  
    
    //---------------------------------- Tabla-----------------------------

    private void listaOrdenCorte(String filtrar) {
        List<OrdenCorte> lista;
        try {
            lista = obj.OrdenCorteFiltrar(filtrar,txtFiltro.getText());
            verOrdenCorte(lista);

        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, e.getMessage());
            System.out.println("ERROR: " + e.getMessage());
        }
    }

    private void verOrdenCorte(List<OrdenCorte> lista) {
        String numeropedido;
        DefaultTableModel tabla = (DefaultTableModel) jTable1.getModel();
        tabla.setRowCount(0);
        for (OrdenCorte ped : lista) {
            numeropedido=String.format("%06d",ped.getNumPedido());
            Object[] fila = {ped.getNumOrdCort(), ped.getRazonSocial(), numeropedido, ped.getFecha(), 
                             ped.getEstado(), ped.getObservacion()};
            tabla.addRow(fila);
        }
    }
    
    
    // ------------------------------- Consultar --> OrdenCorteVista----------------------------
      private void consultarCodigoProformaInfo(int idP) throws Exception {

          proforma = proformacontroler.ProformaBuscar1(idP);
          if (proforma != null) {
              
              numCotizacion = proforma.getCodProforma();
              OrdenCorteInfo.labelNumCotizacion.setText(proforma.getCodProforma());
       
        } else {
            //JOptionPane.showMessageDialog(null, "Contacto no registrado");
            //System.out.println("Error");
        }
    }
     
    private void consultarPedidoYNumCotizacionParaOrdenCorteInfo(int ped) throws Exception {
        pedido = pedidocontroler.PedidoBuscarNumPedAll(ped);
        if (pedido != null) {

            idPed = pedido.getIdPedido();
            idProf=pedido.getIdProforma();
            consultarCodigoProformaInfo(idProf);
          //  OrdenCorteInfo.labelNumCotizacion.setText(proforma.getCodProforma());
            
        } else {
            JOptionPane.showMessageDialog(null, "Pedido no registrado");
            //System.out.println("Error");
        }
    }
     
    
    private void consultarContactoClienteInfo() throws Exception {

        pro3 = obj3.ContactoClienteBuscar2(idConCli);
        if (pro3 != null) {

            String nombre = pro3.getNombres();
            String apellido = pro3.getApellidos();
            String contacto = nombre + " " + apellido;

        } else {
            //JOptionPane.showMessageDialog(null, "Contacto no registrado");
            //System.out.println("Error");
        }
    }

    private void consultarClienteInfo() throws Exception {
        pro2 = obj2.ClienteBuscar1(idCli);
        if (pro2 != null) {

        } else {
            JOptionPane.showMessageDialog(null, "Cliente no registrado");
            //System.out.println("Error");
        }
    }

    private void consultarPedidoInfo(int idpedido) throws Exception {
        pedido = pedidocontroler.PedidoBuscarNumPedAll(idpedido);
        if (pedido != null) {

            idPed = pedido.getIdPedido();
            numPedido = pedido.getNumPedido();
            idCli = pedido.getIdCliente();
            consultarClienteInfo();

            idConCli = pedido.getIdContactoCliente();
            consultarContactoClienteInfo();

        } else {
            JOptionPane.showMessageDialog(null, "Pedido no registrado");
            //System.out.println("Error");
        }
    }

    private void consultarOrdenCorteInfo() throws Exception {
        pro = obj.OrdenCorteBuscarInfo(numOrden);
        if (pro != null) {

            OrdenCorteInfo.labelNumOrdenCorte.setText(pro.getNumOrdCort());
            idOrdCort = pro.getIdOrdenCorte();

            idPed = pro.getIdPedido();
            consultarPedidoInfo(idPed);
            consultarPedidoYNumCotizacionParaOrdenCorteInfo(idPed);
            OrdenCorteInfo.fechaOrdenCorte.setText(pro.getFecha());
            OrdenCorteInfo.labelMotivo.setText(pro.getMotivo());

        } else {
            JOptionPane.showMessageDialog(null, "Orden Corte no registrada");
            //System.out.println("Error");
        }
    }
    
      private void consultarContactoClienteTabla(int id) throws Exception {

        pro3 = obj3.ContactoClienteBuscar2(id);
        if (pro3 != null) {

            String nombre = pro3.getNombres();
            String apellido = pro3.getApellidos();
            String contacto = nombre + " " + apellido;
//            OrdenCorteInfo.labelContacto.setText(contacto);

        } else {
            //JOptionPane.showMessageDialog(null, "Contacto no registrado");
            //System.out.println("Error");
        }
    }
    
    
    
    private void consultarClienteTabla(int id) throws Exception {
        pro2 = obj2.ClienteBuscar1(id);
        if (pro2 != null) {

            txtCliente.setText(pro2.getRazonSocial());

        } else {
            JOptionPane.showMessageDialog(null, "Cliente no registrado");
            //System.out.println("Error");
        }
    } 
      
     private void consultarCodigoProforma(int idP) throws Exception {

          proforma = proformacontroler.ProformaBuscar1(idP);
          if (proforma != null) {
              
              numCotizacion = proforma.getCodProforma();
              txtCodCot.setText(proforma.getCodProforma());
        } else {
            //JOptionPane.showMessageDialog(null, "Contacto no registrado");
            //System.out.println("Error");
        }
    }
     private void consultarPedidoTabla(int idped) throws Exception {

        pedido = pedidocontroler.PedidoBuscarNumPedAll(idped);
        if (pedido != null) {

            idPed = pedido.getIdPedido();
            numPedido = pedido.getNumPedido();
            idProf = pedido.getIdProforma();
            consultarCodigoProforma(idProf);
            txtNumPed.setText(String.format("%06d", pedido.getNumPedido()));
            idCli = pedido.getIdCliente();
            consultarClienteTabla(idCli);
            idConCli = pedido.getIdContactoCliente();
            consultarContactoClienteTabla(idConCli);

        } else {
            //JOptionPane.showMessageDialog(null, "Contacto no registrado");
            //System.out.println("Error");
        }
    }
     private void consultarOrdenCorteTabla(String num, int anioA) throws Exception {
        pro = obj.OrdenCorteBuscarInfo(num, anioA);
        if (pro != null) {
            
            txtNumOrden.setText(pro.getNumOrdCort());
            numOrden=pro.getNumOrdCort();
            idOrdCort=pro.getIdOrdenCorte();
            idPed = pro.getIdPedido();
            consultarPedidoTabla(idPed);
            txtFecha.setText(pro.getFecha());
            txtMotivo.setText(pro.getMotivo());
            motivo =pro.getMotivo();
            estado=pro.getEstado();
            String testValue1 = estado;
            for (int i = 0; i < comboBoxEstado.getModel().getSize(); i++) {
                if (comboBoxEstado.getItemAt(i).toString().equals(testValue1)) {
                    System.out.println(i);
                    comboBoxEstado.setSelectedIndex(i);
                    break;
                }
            }
            txtObser.setText(pro.getObservacion());
            

        } else {
            JOptionPane.showMessageDialog(null, "Orden Corte no registrada");
            //System.out.println("Error");
        }
    }
    
    private void consultarAnioOrden(String fech, String num) throws Exception {
        pro = obj.OrdenCorteBuscarAnio(fech, num);
        if (pro != null) {
            anioCadena=pro.getAnio();
            anio=Integer.parseInt(anioCadena);
        }
  
    }
     
    //---------------- Segunda Tabla ---------------------
     void listaDetalleOrdenCortePedido(int id) {
        List<DetalleOrdenCorte> lista;
        try {
            lista = obj4.DetalleOrdenCorteFiltrar(id);
            verDetalleOrdenCorte(lista);

        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, e.getMessage());
            System.out.println("ERROR: " + e.getMessage());
        }
    }

    private void verDetalleOrdenCorte(List<DetalleOrdenCorte> lista) {

        DefaultTableModel tabla=(DefaultTableModel)jTable3.getModel();
        tabla.setRowCount(0);
        for (DetalleOrdenCorte detOrd : lista) {
            Object[] fila = {detOrd.getCodArt(),detOrd.getCodUbi(),detOrd.getCantidad(), detOrd.getDiametro(),
                             detOrd.getLongitud(), detOrd.getProcedencia(), detOrd.getIdDetalleOrdenCorte()};
            tabla.addRow(fila);
    
    }
}
// ------------------------- Procesar y Leer Datos ----------------------------------------------
    private void procesar(int op) {
        pro = leerDatos();
        try {
            System.out.println("11111111111");
            String msg = obj.OrdenCorteProcesar(pro, op);
            JOptionPane.showMessageDialog(null, msg);
        } catch (Exception e) {
            //JOptionPane.showMessageDialog(null, e.getMessage());
            System.out.println("Error" + e.getMessage());
        }
    }
    
    private OrdenCorte leerDatos() {
        OrdenCorte ordCort = new OrdenCorte();
        
        ordCort.setIdOrdenCorte(idOrdCort);
        ordCort.setIdPedido(idPed);
        ordCort.setNumOrdCort(numOrden);
        ordCort.setFecha(fecha);
        ordCort.setMotivo(motivo);
        ordCort.setEstado(estadoCombo);
        ordCort.setObservacion(txtObser.getText());

        return ordCort;
    }
    
  //-------------------------------------- Habilitar ---------------------------
    void habilitarInicio(){
        txtCliente.setEnabled(false);
        txtFecha.setEnabled(false);
        txtMotivo.setEnabled(false);
        txtNumPed.setEnabled(false);
        txtCodCot.setEnabled(false);
        txtNumOrden.setEnabled(false);
        comboBoxEstado.setEnabled(false);
        txtObser.setEnabled(false);
        buttonModificar.setEnabled(false);
        buttonGuardar.setEnabled(false);
        buttonModificarEnOrden.setEnabled(false);
        buttonVerOrden.setEnabled(false);
    }
    
    void habilitarBuscar(){
        txtCliente.setEnabled(true);
        txtFecha.setEnabled(true);
        txtMotivo.setEnabled(true);
        txtNumPed.setEnabled(true);
        txtCodCot.setEnabled(true);
        txtNumOrden.setEnabled(true);
        comboBoxEstado.setEnabled(false);
        txtObser.setEnabled(false);
        buttonModificar.setEnabled(true);
        buttonGuardar.setEnabled(false);
        buttonModificarEnOrden.setEnabled(true);
        buttonVerOrden.setEnabled(true); 
    }
    
    void habilitarModificar(){
        txtCliente.setEnabled(true);
        txtFecha.setEnabled(true);
        txtMotivo.setEnabled(true);
        txtNumPed.setEnabled(true);
        txtCodCot.setEnabled(true);
        txtNumOrden.setEnabled(true);
        comboBoxEstado.setEnabled(true);
        txtObser.setEnabled(true);
        buttonModificar.setEnabled(false);
        buttonGuardar.setEnabled(true);
        buttonModificarEnOrden.setEnabled(true);
        buttonVerOrden.setEnabled(true); 
    
    }
    
    void habilitarGuardar(){
        txtCliente.setEnabled(true);
        txtFecha.setEnabled(true);
        txtMotivo.setEnabled(true);
        txtNumPed.setEnabled(true);
        txtCodCot.setEnabled(true);        
        txtNumOrden.setEnabled(true);
        comboBoxEstado.setEnabled(false);
        txtObser.setEnabled(false);
        buttonModificar.setEnabled(true);
        buttonGuardar.setEnabled(false);
        buttonModificarEnOrden.setEnabled(true);
        buttonVerOrden.setEnabled(true); 
    
    }
    
    void limpiar(){
        txtCliente.setText("");
        txtFecha.setText("");
        txtMotivo.setText("");
        txtNumPed.setText("");
        txtNumOrden.setText("");
        txtCodCot.setText("");
        comboBoxEstado.setSelectedIndex(0);
        txtObser.setText("");
    
    }
    
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import controller.ProveedorController;
import controller.ProveedorRubroController;
import controller.RubroController;
import entity.Proveedor;
import entity.ProveedorRubro;
import entity.Rubro;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ARCRODINPC-06
 */
public class ProveedorRubroRegistro extends javax.swing.JInternalFrame {

    /**
     * Creates new form ProveedorRubro
     */
    int idProveeRubro;
    int idProvee;
    int idRubro;
    
    int tabla;
    String idProvRub;
    
    String estado;
    String estadoCombo;
    
    public ProveedorRubroRegistro() throws Exception {
        initComponents();
        System.out.println("1111111111111111111");
        consultarProveedor(Proveedores.y);
        System.out.println("2222222222222222222");
        idProvee=Proveedores.y;
        System.out.println("id del Proveedor: "+ idProvee);
        listaProveedorRubro(idProvee);
        habilitarInicio();
        idRubro=0;
        comboBoxEstado.setSelectedIndex(1);
        
        comboBoxRubro.getEditor().getEditorComponent().addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent evt) {
                // aca falta validar que me ejecute el campo
                String cadenaEscrita = comboBoxRubro.getEditor().getItem().toString().trim();
                if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                    try {
                     consultarRubroNombre(comboBoxRubro.getItemAt(0));
                    } catch (Exception ex) {
                        Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    comboBoxRubro.setSelectedIndex(0);
                   
                    if (comparar(cadenaEscrita)) {
                        try {
                            // compara si el texto escrito se ecuentra en la lista
                            // busca el texto escrito en la base de datos, solo pasa si es identico
                           consultarRubroNombre(cadenaEscrita);

                                                      
                        } catch (Exception ex) {
                            Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    

                    } else {
                        try {
                            for (int i = 0; i <comboBoxRubro.getModel().getSize(); i++) {
                                if (comboBoxRubro.getItemAt(i).equals(cadenaEscrita)) {
                                    consultarRubroNombre(comboBoxRubro.getItemAt(i));
                                    comboBoxRubro.setSelectedIndex(i);
                                }
                            }
                            
                            } catch (Exception ex) {
                            Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }

                if (evt.getKeyCode() >= 65 && evt.getKeyCode() <= 90 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105 || evt.getKeyCode() == 8) {
                    try {
                        comboBoxRubro.setModel(rubrocontroler.RubroListarCombo(cadenaEscrita));
                    } catch (Exception ex) {
                        Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (comboBoxRubro.getItemCount() > 0) {
                        comboBoxRubro.getEditor().setItem(cadenaEscrita);
                        comboBoxRubro.showPopup();
                    } else {
                        comboBoxRubro.addItem(cadenaEscrita);
                    }
                }
            }
        });
    
    }
    
     private boolean comparar(String cadena) {
        Object[] lista = comboBoxRubro.getComponents();
        boolean encontrado = false;
        for (Object object : lista) {
            if (cadena.equals(object)) {
                encontrado = true;
                break;
            }

        }
        return encontrado;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        labelIdProveedorRubro = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        buttonRegistrarRubro = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtProveedor = new javax.swing.JTextField();
        comboBoxRubro = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtObs = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        buttonCerrar = new javax.swing.JButton();
        buttonLimpiar = new javax.swing.JButton();
        buttonNuevo = new javax.swing.JButton();
        buttonRegistrar = new javax.swing.JButton();
        buttonModificar = new javax.swing.JButton();
        buttonGuardar = new javax.swing.JButton();
        buttonEliminar = new javax.swing.JButton();
        comboBoxEstado = new javax.swing.JComboBox<>();

        setClosable(true);
        setTitle("Registrar Rubro del Proveedor");

        jLabel1.setText("N°:");

        labelIdProveedorRubro.setText("000000");

        jLabel3.setText("Proveedor:");

        buttonRegistrarRubro.setText("Rubro:");
        buttonRegistrarRubro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRegistrarRubroActionPerformed(evt);
            }
        });

        jLabel4.setText("Observación:");

        jLabel5.setText("Estado:");

        comboBoxRubro.setEditable(true);

        txtObs.setColumns(20);
        txtObs.setRows(5);
        jScrollPane1.setViewportView(txtObs);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "idProvRub", "Rubro", "Observación", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(25);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(180);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(310);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(100);
        }

        buttonCerrar.setText("Cerrar");
        buttonCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCerrarActionPerformed(evt);
            }
        });

        buttonLimpiar.setText("Limpiar");
        buttonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLimpiarActionPerformed(evt);
            }
        });

        buttonNuevo.setText("Nuevo");
        buttonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNuevoActionPerformed(evt);
            }
        });

        buttonRegistrar.setText("Registrar");
        buttonRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRegistrarActionPerformed(evt);
            }
        });

        buttonModificar.setText("Modificar");
        buttonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonModificarActionPerformed(evt);
            }
        });

        buttonGuardar.setText("Guardar");
        buttonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGuardarActionPerformed(evt);
            }
        });

        buttonEliminar.setText("Eliminar");
        buttonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEliminarActionPerformed(evt);
            }
        });

        comboBoxEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECCIONAR", "ACTIVO", "INACTIVO" }));
        comboBoxEstado.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxEstadoItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(buttonRegistrarRubro)
                            .addComponent(jLabel3)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(labelIdProveedorRubro))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(20, 20, 20)
                                    .addComponent(jLabel4)))
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtProveedor)
                                .addComponent(comboBoxRubro, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE))
                            .addComponent(comboBoxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonRegistrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonModificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonNuevo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(66, 66, 66))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 618, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(labelIdProveedorRubro))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonRegistrarRubro)
                            .addComponent(comboBoxRubro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonLimpiar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonNuevo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonRegistrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonModificar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonEliminar)
                            .addComponent(comboBoxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))))
                .addGap(18, 21, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonCerrar)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRegistrarActionPerformed

        if(idRubro==0){
           JOptionPane.showMessageDialog(null, "Llenar el campo de Rubro");
        } else {
            procesar(1);
            listaProveedorRubro(idProvee);
            limpiar();
            habilitarInicio();
        }
        
    }//GEN-LAST:event_buttonRegistrarActionPerformed

    private void buttonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGuardarActionPerformed
        procesar(2);
        listaProveedorRubro(idProvee);
        habilitarGuardar();
    }//GEN-LAST:event_buttonGuardarActionPerformed

    private void buttonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEliminarActionPerformed
        procesar(3);
        listaProveedorRubro(idProvee);
        limpiar();
        habilitarEliminar();
    }//GEN-LAST:event_buttonEliminarActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        tabla = jTable1.getSelectedRow();
        idProvRub = jTable1.getValueAt(tabla, 0).toString();
        idProveeRubro=Integer.parseInt(idProvRub);
        try {
            consultar(idProveeRubro);
        } catch (Exception ex) {
            Logger.getLogger(ProveedorRubroRegistro.class.getName()).log(Level.SEVERE, null, ex);
        }
        habilitarBuscar();
    }//GEN-LAST:event_jTable1MouseClicked

    private void buttonCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCerrarActionPerformed
        dispose();
    }//GEN-LAST:event_buttonCerrarActionPerformed

    private void buttonRegistrarRubroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRegistrarRubroActionPerformed
        Rubros rubro= new Rubros();
        Principal.jDesktopPane1.add(rubro);
        rubro.toFront();
        rubro.setVisible(true);
    }//GEN-LAST:event_buttonRegistrarRubroActionPerformed

    private void buttonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNuevoActionPerformed
        habilitarNuevo();
    }//GEN-LAST:event_buttonNuevoActionPerformed

    private void buttonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonModificarActionPerformed
        habilitarModificar();
    }//GEN-LAST:event_buttonModificarActionPerformed

    private void buttonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLimpiarActionPerformed
        limpiar();
        habilitarInicio();
    }//GEN-LAST:event_buttonLimpiarActionPerformed

    private void comboBoxEstadoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxEstadoItemStateChanged
       if(comboBoxEstado.getSelectedIndex()!=0){
          estadoCombo=comboBoxEstado.getSelectedItem().toString();
       }else{
           estadoCombo="";
       }
    }//GEN-LAST:event_comboBoxEstadoItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCerrar;
    private javax.swing.JButton buttonEliminar;
    private javax.swing.JButton buttonGuardar;
    private javax.swing.JButton buttonLimpiar;
    private javax.swing.JButton buttonModificar;
    private javax.swing.JButton buttonNuevo;
    private javax.swing.JButton buttonRegistrar;
    private javax.swing.JButton buttonRegistrarRubro;
    private javax.swing.JComboBox<String> comboBoxEstado;
    private javax.swing.JComboBox<String> comboBoxRubro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel labelIdProveedorRubro;
    private javax.swing.JTextArea txtObs;
    private javax.swing.JTextField txtProveedor;
    // End of variables declaration//GEN-END:variables

    ProveedorRubroController proveedorrubrocontroler= new ProveedorRubroController();
    ProveedorRubro proveedorrubro;
    
    RubroController rubrocontroler=new RubroController();
    Rubro rubro;
    
    ProveedorController proveedorcontroler=new ProveedorController();
    Proveedor proveedor;
    
     private void procesar(int op) {
       proveedorrubro=leerDatos();
        try {
            String msg=proveedorrubrocontroler.ProveedorRubroProcesar(proveedorrubro, op);
            JOptionPane.showMessageDialog(null, msg);            
        } catch (Exception e) {
            //JOptionPane.showMessageDialog(null, e.getMessage());
             System.out.println("Error"+e.getMessage());
        }       
   }
   
   
   
     private void consultar(int id) throws Exception {
       proveedorrubro = proveedorrubrocontroler.ProveedorRubroBuscar(id);
        if (proveedorrubro!= null) {

            labelIdProveedorRubro.setText(proveedorrubro.getIdProvRubpk()+"");
            idProvee = proveedorrubro.getIdProv();
            consultarProveedor(idProvee);
            idRubro = proveedorrubro.getIdRubro();
            consultarRubroId(idRubro);           
            txtObs.setText(proveedorrubro.getObs());
           
            estado=proveedorrubro.getEstado();
            String testValue1 = estado;
            for (int i = 0; i < comboBoxEstado.getModel().getSize(); i++) {
                if (comboBoxEstado.getItemAt(i).toString().equals(testValue1)) {
                    System.out.println(i);
                    comboBoxEstado.setSelectedIndex(i);
                    break;
                }
            }  
            
            
        } else {
            JOptionPane.showMessageDialog(null, "Contacto no registrado");
            //System.out.println("Error");
        }
    }
     
    
    private void consultarProveedor(int id) throws Exception {
       proveedor = proveedorcontroler.ProveedorBuscarId(id);
        if (proveedor!= null) {

           txtProveedor.setText(proveedor.getRazonSocial());
            
            
        } else {
            JOptionPane.showMessageDialog(null, "Proveedor no registrado");
            //System.out.println("Error");
        }
    }
    
    
    
     private ProveedorRubro leerDatos() {
        ProveedorRubro proRub = new ProveedorRubro();
        
        proRub.setIdProv(idProvee);
        proRub.setIdRubro(idRubro);
        proRub.setObs(txtObs.getText());
        proRub.setEstado(estadoCombo);
        proRub.setIdProvRubpk(idProveeRubro);
        
        return proRub;
    }
     
 private void consultarRubroNombre(String cadena) throws Exception {
        rubro = rubrocontroler.RubroBuscarNombre(cadena);
        if (rubro != null) {

            idRubro= rubro.getIdRubro();
            System.out.println("El id del rubro es: "+idRubro);
            

        } else {
            JOptionPane.showMessageDialog(null, "Rubro no registrado");
            //System.out.println("Error");
        }
    }
    
 private void consultarRubroId(int id) throws Exception {
        rubro = rubrocontroler.RubroBuscar(id);
        if (rubro != null) {
            
            idRubro=rubro.getIdRubro();
            comboBoxRubro.setSelectedItem(rubro.getDescripcion());
                      

        } else {
            JOptionPane.showMessageDialog(null, "Rubro no registrado");
            //System.out.println("Error");
        }
    }
     
 
//---------------------------------- Tabla ---------------------------------------------------
     void listaProveedorRubro(int i) {
        List<ProveedorRubro> lista;
        try {
            
            lista = proveedorrubrocontroler.ProveedorRubroListar(i);
            verProveedorRubro(lista);

        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, e.getMessage());
            System.out.println("ERROR: " + e.getMessage());
        }
    }

     private void verProveedorRubro(List<ProveedorRubro> lista) {

        DefaultTableModel tabla = (DefaultTableModel) jTable1.getModel();
        tabla.setRowCount(0);
        for (ProveedorRubro proRub : lista) {
            Object[] fila = {proRub.getIdProvRubpk(),proRub.getRubro(), proRub.getObs(), proRub.getEstado()};
            tabla.addRow(fila);
        }
    }
   
//--------------------------- Habilitar ---------------------------
     void habilitarInicio(){
         
         buttonLimpiar.setEnabled(true);
         buttonNuevo.setEnabled(true);
         buttonRegistrar.setEnabled(false);
         buttonModificar.setEnabled(false);
         buttonGuardar.setEnabled(false);
         buttonEliminar.setEnabled(false);
         
         buttonRegistrarRubro.setEnabled(true);
         
         txtProveedor.setEnabled(false);
         comboBoxRubro.setEnabled(false);
         buttonRegistrarRubro.setEnabled(false);
         txtObs.setEnabled(false);
         comboBoxEstado.setEnabled(false);

     }
     
     void habilitarBuscar(){ 
         
         buttonLimpiar.setEnabled(true);
         buttonNuevo.setEnabled(false);
         buttonRegistrar.setEnabled(false);
         buttonModificar.setEnabled(true);
         buttonGuardar.setEnabled(false);
         buttonEliminar.setEnabled(true);
         
         buttonRegistrarRubro.setEnabled(false);
         
         txtProveedor.setEnabled(false);
         comboBoxRubro.setEnabled(false);
         buttonRegistrarRubro.setEnabled(false);
         txtObs.setEnabled(false);
         comboBoxEstado.setEnabled(false);
     }
     
     void habilitarNuevo(){
         
         buttonLimpiar.setEnabled(true);
         buttonNuevo.setEnabled(false);
         buttonRegistrar.setEnabled(true);
         buttonModificar.setEnabled(false);
         buttonGuardar.setEnabled(false);
         buttonEliminar.setEnabled(false);
         
         buttonRegistrarRubro.setEnabled(true);
         
         txtProveedor.setEnabled(true);
         comboBoxRubro.setEnabled(true);
         buttonRegistrarRubro.setEnabled(true);
         txtObs.setEnabled(true);
         comboBoxEstado.setEnabled(true);
     
     }
     
     void habilitarRegistrar(){
     
         buttonLimpiar.setEnabled(true);
         buttonNuevo.setEnabled(false);
         buttonRegistrar.setEnabled(false);
         buttonModificar.setEnabled(true);
         buttonGuardar.setEnabled(false);
         buttonEliminar.setEnabled(true);
         
         buttonRegistrarRubro.setEnabled(false);
         
         txtProveedor.setEnabled(false);
         comboBoxRubro.setEnabled(false);
         buttonRegistrarRubro.setEnabled(false);
         txtObs.setEnabled(false);
         comboBoxEstado.setEnabled(false);
         
     }
     
     void habilitarModificar(){
     
         buttonLimpiar.setEnabled(true);
         buttonNuevo.setEnabled(false);
         buttonRegistrar.setEnabled(false);
         buttonModificar.setEnabled(false);
         buttonGuardar.setEnabled(true);
         buttonEliminar.setEnabled(false);
         
         buttonRegistrarRubro.setEnabled(false);
         
         txtProveedor.setEnabled(true);
         comboBoxRubro.setEnabled(true);
         buttonRegistrarRubro.setEnabled(true);
         txtObs.setEnabled(true);
         comboBoxEstado.setEnabled(true);
     }
     void habilitarGuardar(){
     
          buttonLimpiar.setEnabled(true);
         buttonNuevo.setEnabled(false);
         buttonRegistrar.setEnabled(false);
         buttonModificar.setEnabled(true);
         buttonGuardar.setEnabled(false);
         buttonEliminar.setEnabled(true);
         
         buttonRegistrarRubro.setEnabled(false);
         
         txtProveedor.setEnabled(false);
         comboBoxRubro.setEnabled(false);
         buttonRegistrarRubro.setEnabled(false);
         txtObs.setEnabled(false);
         comboBoxEstado.setEnabled(false);
     }
     
     void habilitarEliminar(){
     
         buttonLimpiar.setEnabled(true);
         buttonNuevo.setEnabled(true);
         buttonRegistrar.setEnabled(false);
         buttonModificar.setEnabled(false);
         buttonGuardar.setEnabled(false);
         buttonEliminar.setEnabled(false);
         
         buttonRegistrarRubro.setEnabled(true);
         
         txtProveedor.setEnabled(false);
         comboBoxRubro.setEnabled(false);
         buttonRegistrarRubro.setEnabled(false);
         txtObs.setEnabled(false);
         comboBoxEstado.setEnabled(false);
     }

     
     void limpiar(){
     
         comboBoxRubro.setSelectedItem("");
         txtObs.setText("");
         comboBoxEstado.setSelectedIndex(0);
         idRubro=0;
     
     }
}

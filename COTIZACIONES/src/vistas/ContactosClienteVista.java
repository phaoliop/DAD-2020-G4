/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import controller.ClienteController;
import controller.ContactoClienteController;
import controller.DireccionAnexaController;
import controller.SucursalController;
import entity.Cliente;
import entity.ContactoCliente;
import entity.DireccionAnexa;
import entity.Sucursal;
import exportarexcel.clsExportarExcel;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ARCRODINPC-06
 */
public class ContactosClienteVista extends javax.swing.JInternalFrame {

    /**
     * Creates new form ContactosClienteVista
     */
    
    int idConCli;
    int idCli;
    String dni;
    String nomb;
    String apell;
    String carg;
    String tlf1;
    String tlf2;
    String correo;
    String sucu;
    String obser;
    
    String contact;
    
    String sucursalNombre;
    
    int tabla;
    
    String filtro="c.razonSocial";
    
    public ContactosClienteVista() {
        initComponents();
        listaContactoCliente(filtro, txtLike.getText());
        habilitarInicio();
        
         comboBoxSucursal.getEditor().getEditorComponent().addKeyListener(new KeyAdapter() {

         @Override
         public void keyReleased(KeyEvent evt) {
                // aca falta validar que me ejecute el campo
                String cadenaEscrita = comboBoxSucursal.getEditor().getItem().toString();
                if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                    try {
                     consultarSucursalNombre(comboBoxSucursal.getItemAt(0));
                    } catch (Exception ex) {
                        Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    comboBoxSucursal.setSelectedIndex(0);
                   
                    if (comparar(cadenaEscrita)) {
                        try {
                            // compara si el texto escrito se ecuentra en la lista
                            // busca el texto escrito en la base de datos, solo pasa si es identico
                           consultarSucursalNombre(cadenaEscrita);

                                                      
                        } catch (Exception ex) {
                            Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    

                    } else {
                        try {
                            for (int i = 0; i <comboBoxSucursal.getModel().getSize(); i++) {
                                if (comboBoxSucursal.getItemAt(i).equals(cadenaEscrita)) {
                                    consultarSucursalNombre(comboBoxSucursal.getItemAt(i));
                                    comboBoxSucursal.setSelectedIndex(i);
                                }
                            }
                            
                            } catch (Exception ex) {
                            Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }

                if (evt.getKeyCode() >= 65 && evt.getKeyCode() <= 90 || evt.getKeyCode() >= 96 && evt.getKeyCode() <= 105 || evt.getKeyCode() == 8) {
                    try {
                        comboBoxSucursal.setModel(sucursalcontroler.SucursalListarCombo(cadenaEscrita));
                    } catch (Exception ex) {
                        Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (comboBoxSucursal.getItemCount() > 0) {
                        comboBoxSucursal.getEditor().setItem(cadenaEscrita);
                        comboBoxSucursal.showPopup();
                    } else {
                        comboBoxSucursal.addItem(cadenaEscrita);
                    }
                }
            }
        });          
    }
    
     private boolean comparar(String cadena) {
        Object[] lista = comboBoxSucursal.getComponents();
        boolean encontrado = false;
        for (Object object : lista) {
            if (cadena.equals(object)) {
                encontrado = true;
                break;
            }

        }
        return encontrado;
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboBoxFiltro = new javax.swing.JComboBox<>();
        txtLike = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        buttonCerrar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtConCli = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtRazSocial = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDirFis = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        buttonModificar = new javax.swing.JButton();
        buttonGuardar = new javax.swing.JButton();
        txtObserv = new javax.swing.JTextField();
        buttonLimpiar = new javax.swing.JButton();
        comboBoxSucursal = new javax.swing.JComboBox<>();
        buttonSucursal = new javax.swing.JButton();
        buttonExportExcel = new javax.swing.JButton();

        setClosable(true);
        setTitle("Contactos de Clientes");

        comboBoxFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECCIONAR", "CONTACTO", "CORREO", "TELÉFONO", "RAZÓN SOCIAL", "SUCURSAL" }));
        comboBoxFiltro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxFiltroItemStateChanged(evt);
            }
        });

        txtLike.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtLikeKeyReleased(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "idContacCli", "Contacto", "Teléfono", "Correo", "Razón Social", "Sucursal", "Observación"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(10);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(130);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(170);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(250);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(6).setPreferredWidth(190);
        }

        buttonCerrar.setText("Cerrar");
        buttonCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCerrarActionPerformed(evt);
            }
        });

        jLabel1.setText("Contacto de Cliente:");

        jLabel2.setText("Razón Social:");

        jLabel3.setText("Dirección Fiscal:");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "idDirAnex", "Dirección", "Observación"
            }
        ));
        jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setPreferredWidth(10);
            jTable2.getColumnModel().getColumn(1).setPreferredWidth(576);
            jTable2.getColumnModel().getColumn(2).setPreferredWidth(280);
        }

        jLabel4.setText("Direciones Anexas:");

        jLabel6.setText("Observación del Contacto:");

        buttonModificar.setText("Modificar");
        buttonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonModificarActionPerformed(evt);
            }
        });

        buttonGuardar.setText("Guardar");
        buttonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGuardarActionPerformed(evt);
            }
        });

        buttonLimpiar.setText("Limpiar");
        buttonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLimpiarActionPerformed(evt);
            }
        });

        comboBoxSucursal.setEditable(true);

        buttonSucursal.setText("Sucursal:");
        buttonSucursal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSucursalActionPerformed(evt);
            }
        });

        buttonExportExcel.setText("ExportExcel");
        buttonExportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExportExcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtRazSocial)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtConCli, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6)
                                            .addComponent(buttonSucursal, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtObserv, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                                            .addComponent(comboBoxSucursal, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 878, Short.MAX_VALUE)
                                    .addComponent(txtDirFis))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(buttonGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonModificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 1016, Short.MAX_VALUE)
                                .addComponent(buttonCerrar)))
                        .addGap(13, 13, 13))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(comboBoxFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLike, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonLimpiar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonExportExcel)
                        .addGap(23, 23, 23))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLike, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonLimpiar)
                    .addComponent(buttonExportExcel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtRazSocial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonModificar)
                    .addComponent(comboBoxSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSucursal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtConCli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtObserv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonGuardar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtDirFis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonCerrar)
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCerrarActionPerformed
        dispose();
    }//GEN-LAST:event_buttonCerrarActionPerformed

    private void comboBoxFiltroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxFiltroItemStateChanged
        if (comboBoxFiltro.getSelectedItem() == "CONTACTO") {
            filtro = "concat(cc.nombres,' ',cc.apellidos)";
            listaContactoCliente(filtro, txtLike.getText());
            System.out.println(filtro);
        } else if (comboBoxFiltro.getSelectedItem() == "CORREO") {
            filtro = "cc.correo";
            listaContactoCliente(filtro, txtLike.getText());
            System.out.println(filtro);
        } else if (comboBoxFiltro.getSelectedItem() == "TELÉFONO") {
            filtro = "cc.telefono1";
            listaContactoCliente(filtro, txtLike.getText());
            System.out.println(filtro);
        } else if (comboBoxFiltro.getSelectedItem() == "RAZÓN SOCIAL") {
            filtro = "c.razonSocial";
            listaContactoCliente(filtro, txtLike.getText());
            System.out.println(filtro);
        } else if (comboBoxFiltro.getSelectedItem() == "SUCURSAL") {
            filtro = "cc.sucursal";
            listaContactoCliente(filtro, txtLike.getText());
            System.out.println(filtro);
        } else if (comboBoxFiltro.getSelectedItem() == "SELECCIONAR") {
            filtro = "c.razonSocial";
            listaContactoCliente(filtro, txtLike.getText());
            System.out.println(filtro);
        }
    }//GEN-LAST:event_comboBoxFiltroItemStateChanged

    private void txtLikeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLikeKeyReleased
        listaContactoCliente(filtro, txtLike.getText());
    }//GEN-LAST:event_txtLikeKeyReleased

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        tabla = jTable1.getSelectedRow();
        idConCli = Integer.parseInt(jTable1.getValueAt(tabla, 0).toString());

        try {
            consultar(idConCli);
        } catch (Exception ex) {
            Logger.getLogger(ContactosClienteVista.class.getName()).log(Level.SEVERE, null, ex);
        }
        habilitarBuscar();
    }//GEN-LAST:event_jTable1MouseClicked

    private void buttonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGuardarActionPerformed
        procesar(2);
        listaContactoCliente(filtro, txtLike.getText());
        habilitarGuardar();
        
    }//GEN-LAST:event_buttonGuardarActionPerformed

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        if ((evt.getKeyCode() == KeyEvent.VK_DOWN) || (evt.getKeyCode() == KeyEvent.VK_UP)) {
            tabla = jTable1.getSelectedRow();
            idConCli = Integer.parseInt(jTable1.getValueAt(tabla, 0).toString());

            try {
                consultar(idConCli);
            } catch (Exception ex) {
                Logger.getLogger(ContactosClienteVista.class.getName()).log(Level.SEVERE, null, ex);
            }

        }  
        habilitarBuscar();
    }//GEN-LAST:event_jTable1KeyReleased

    private void buttonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonModificarActionPerformed
        habilitarModificar();
    }//GEN-LAST:event_buttonModificarActionPerformed

    private void buttonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLimpiarActionPerformed
       limpiar();
       habilitarInicio();
    }//GEN-LAST:event_buttonLimpiarActionPerformed

    private void buttonSucursalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSucursalActionPerformed
        SucursalRegistro sucuRe = new SucursalRegistro();
        Principal.jDesktopPane1.add(sucuRe);
        sucuRe.toFront();
        sucuRe.setVisible(true);     
    }//GEN-LAST:event_buttonSucursalActionPerformed

    private void buttonExportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExportExcelActionPerformed
        clsExportarExcel objeto = new clsExportarExcel();
        try {
            objeto.exportarExcel(jTable1);
        } catch (IOException ex) {
            Logger.getLogger(CajaChicaRegistro.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonExportExcelActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCerrar;
    private javax.swing.JButton buttonExportExcel;
    private javax.swing.JButton buttonGuardar;
    private javax.swing.JButton buttonLimpiar;
    private javax.swing.JButton buttonModificar;
    private javax.swing.JButton buttonSucursal;
    private javax.swing.JComboBox<String> comboBoxFiltro;
    private javax.swing.JComboBox<String> comboBoxSucursal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField txtConCli;
    private javax.swing.JTextField txtDirFis;
    private javax.swing.JTextField txtLike;
    private javax.swing.JTextField txtObserv;
    private javax.swing.JTextField txtRazSocial;
    // End of variables declaration//GEN-END:variables

    ContactoClienteController contactoclientecontroler = new ContactoClienteController();
    ContactoCliente contactocliente;
    
    ClienteController clientecontroler = new ClienteController();
    Cliente cliente;
    
    DireccionAnexaController direccioncontroler =  new DireccionAnexaController();
    DireccionAnexa direccion;
    
    SucursalController sucursalcontroler= new SucursalController();
    Sucursal sucursal;
    
      //---------------------------------- Tabla-----------------------------

    private void listaContactoCliente(String filtrar, String pal) {
        List<ContactoCliente> lista;
        try {
            lista = contactoclientecontroler.ContactoClienteFiltrar(filtrar,pal);
            verOrdenCorte(lista);

        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, e.getMessage());
            System.out.println("ERROR: " + e.getMessage());
        }
    }

    private void verOrdenCorte(List<ContactoCliente> lista) {
        DefaultTableModel tabla = (DefaultTableModel) jTable1.getModel();
        tabla.setRowCount(0);
        for (ContactoCliente conCli : lista) {
            
            Object[] fila = {conCli.getIdContactoCliente(), conCli.getNombCompl(), conCli.getTlf1(), conCli.getCorreo(),
                             conCli.getRazSocial(), conCli.getSucursal(), conCli.getObservacion()};
            tabla.addRow(fila);
        }
    }

//---------------------------- Consultar --------------------------------------------
     private void consultar(int id ) throws Exception {
        contactocliente = contactoclientecontroler.ContactoClienteBuscar(id);
        if (contactocliente != null) {

            idConCli=contactocliente.getIdContactoCliente();
            idCli=contactocliente.getIdCliente();
            consultarCliente(idCli);
            listaDireccionAnexa(idCli);
            dni=contactocliente.getDni();
            nomb=contactocliente.getNombres();
            apell=contactocliente.getApellidos();
            contact=contactocliente.getNombres()+" "+contactocliente.getApellidos();
            txtConCli.setText(contact);
            carg=contactocliente.getCargo();
            tlf1=contactocliente.getTlf1();
            tlf2=contactocliente.getTlf2();
            correo=contactocliente.getCorreo();
            sucu=contactocliente.getSucursal();
            comboBoxSucursal.setSelectedItem(contactocliente.getSucursal());
            obser=contactocliente.getObservacion();
            txtObserv.setText(contactocliente.getObservacion());
           

        } else {
            JOptionPane.showMessageDialog(null, "Contacto no registrado");
            //System.out.println("Error");
        }
    }
     
     private void consultarCliente(int id ) throws Exception {
        cliente = clientecontroler.ClienteBuscar1(id);
        if (cliente != null) {

           txtRazSocial.setText(cliente.getRazonSocial());
           txtDirFis.setText(cliente.getDireccion());
        
        } else {
            JOptionPane.showMessageDialog(null, "Contacto no registrado");
            //System.out.println("Error");
        }
    }
    
      private void consultarSucursalNombre(String cadena) throws Exception {
        sucursal = sucursalcontroler.SucursalBuscarNombre(cadena);
        if (sucursal != null) {

            sucursalNombre=sucursal.getSucursal();
            System.out.println("la sucursal es: "+sucursalNombre);
            

        } else {
            JOptionPane.showMessageDialog(null, "sucursal no registrado");
            //System.out.println("Error");
        }
    }
      
// ----------------------------- Tabla Dirección Anexa --------------------------
   
     private void listaDireccionAnexa(int id) {
        List<DireccionAnexa> lista;
        try {
            lista = direccioncontroler.DireccionAnexaListar(id);
            verDireccionAnexa(lista);

        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, e.getMessage());
            System.out.println("ERROR: " + e.getMessage());
        }
    }

    private void verDireccionAnexa(List<DireccionAnexa> lista) {
        DefaultTableModel tabla = (DefaultTableModel) jTable2.getModel();
        tabla.setRowCount(0);
        for (DireccionAnexa direc : lista) {
            
            Object[] fila = {direc.getIdDireccion(), direc.getDireccion(), direc.getObser()};
            tabla.addRow(fila);
        }
    }
 //---------------------------- Procesar ----------------------------------------
    private void procesar(int op) {

        contactocliente = leerDatos();

        try {

            String msg = contactoclientecontroler.ContactoClienteProcesar(contactocliente, op);
            JOptionPane.showMessageDialog(null, msg);
        } catch (Exception e) {
            //JOptionPane.showMessageDialog(null, e.getMessage());
            System.out.println("Error" + e.getMessage());
        }
    }
    
     private ContactoCliente leerDatos() {
        ContactoCliente conCli = new ContactoCliente();

        conCli.setIdContactoCliente(idConCli);
        conCli.setIdCliente(idCli);
        conCli.setDni(dni);
        conCli.setNombres(nomb);
        conCli.setApellidos(apell);
        conCli.setCargo(carg);
        conCli.setTlf1(tlf1);
        conCli.setTlf2(tlf2);
        conCli.setCorreo(correo);
        conCli.setSucursal(comboBoxSucursal.getEditor().getItem().toString());
        conCli.setObservacion(txtObserv.getText());

        return conCli;
    }
    
    void limpiar() {
        txtRazSocial.setText("");
        txtConCli.setText("");
        txtDirFis.setText("");        
        comboBoxSucursal.setSelectedItem("");
        txtObserv.setText("");
        listaDireccionAnexa(0);
    }
    
    void habilitarModificar(){
        
        buttonModificar.setEnabled(false);
        buttonGuardar.setEnabled(true);
        buttonSucursal.setEnabled(true);
        
        comboBoxSucursal.setEnabled(true);
        txtObserv.setEnabled(true);
    }
    
    void habilitarGuardar(){
        
        buttonModificar.setEnabled(true);
        buttonGuardar.setEnabled(false);
        buttonSucursal.setEnabled(false);
        
        comboBoxSucursal.setEnabled(false);
        txtObserv.setEnabled(false);
    
    }
    
    void habilitarInicio(){
        
        buttonModificar.setEnabled(false);
        buttonGuardar.setEnabled(false);
        buttonSucursal.setEnabled(false);
        
        comboBoxSucursal.setEnabled(false);
        txtObserv.setEnabled(false);
    
    }
    
    void habilitarBuscar(){
        
        buttonModificar.setEnabled(true);
        buttonGuardar.setEnabled(false);
        buttonSucursal.setEnabled(false);
        
        comboBoxSucursal.setEnabled(false);
        txtObserv.setEnabled(false);
    }
}
